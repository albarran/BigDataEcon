---
# subtitle: "Análisis de Datos Multivariantes aplicado al Marketing"
# subtitle: "Muestreo y Análisis de Datos"
subtitle: "Técnicas para 'Big Data' en Economía - Curso 2023/24 \n\n Universidad de Alicante"
title    :  "Tema 01 - Tratamiento de datos (una tabla)" # con `dplyr` (una sola tabla)"
author:  
    - "Pedro Albarrán"
#    - "Teresa Molina"
institute: "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
   
# institute: 
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
format:
#   beamer:
#     logo: figure/by-nc-sa2.png
#     titlegraphic: figure/by-nc-sa.png
#     theme: Boadilla # Copenhagen # CambridgeUS #
#     outertheme: miniframes
#     colortheme: crane
#     section-titles: false
#     fontsize: 10pt
# #    header-includes:
# #      - \setbeameroption{show notes}
# #      # - \setbeameroption{show notes on second screen}
  revealjs:
    logo: figure/by-nc-sa2.png
    titlegraphic: figure/by-nc-sa.png
    theme:  
      - serif # simple # default # moon # beige # sky #
      - custom.scss
    smaller: true # false #  
    scrollable: true
    embed-resources: true
    slide-number: true
    show-slide-number: all
    transition: slide # concave # 
    background-transition: fade
    progress: true
execute:
  enabled: false      # (no) ejecutar code chunks
  eval: false        # por defecto, evalúa y muestra códido de code chunks
  echo: true
  warning: false    # pero no los mensajes ni warnings
  message: false
knitr:
  opts_chunk:
    results: hide     # ni muestra resultados ni figuras
    fig.show: hide
lang: es
strip-comments: true
toc: false
css: styles.css
---



```{r setup}
#| include = FALSE
# se evalua pero no incluye output (mensajes, etc.)

# Elimino todo del Entorno (del documento)
rm(list = ls())

# Working directory
#setwd("/home/albarran/Dropbox/ECMTII/ECMTII/Slides_2022")

# Cargo todas las bibliotecas necesarias
# (se podría hacer cuando cada una sea necesaria)
library(tidyverse)
# library(tidymodels)
# library(printr)
# library(skimr)
# library(dlookr)
# library(broom)
library(kableExtra)
# library(rpart.plot)
# library(vip)
library(rmarkdown)
#render("filename.Rmd")     
#browseURL("filename.html")
```

<!--
        * datos de gapminder en lugar de habitual <http://jules32.github.io/2016-07-12-Oxford/dplyr_tidyr/>                  <http://stat545.com/block009_dplyr-intro.html#revel-in-the-convenience>
-->


<!--
## El meta-paquete `tidyverse`

-   Muchos datos de ejemplo están ya preparados para el análisis. 

-   En la vida real, los datos se tiene que recolectar, unir, limpiar, recodificar, etc.

-   `tidyverse` incluye una colección de bibliotecas para todo el proceso "tratamiento de datos" y su visualización (para obtener información)

-   El núcleo de `tidyverse` lo componen (una descripción [aquí](https://www.tidyverse.org/packages/)):

:::: {.columns}

::: {.column width="40%"}
-   `readr`
-   `tibble`
-   `ggplot2`
-   `tidyr`
-   `purrr`
-   `dplyr`

::: 
::: {.column width="40%"}

![](figure/tidyverse_full.jpg){width="70%"}
:::
::::

::: {.notes}

- En Econometría II, los datos de ejemplo ya están limpios y preparados

- Para trabajar en la vida real, conviene aprender `tidyverse`

:::
-->

<!--
## *data frame* (R `base`) vs *tibble* (`tidyverse`)

::: {.notes} 

- https://blog.rstudio.com/2016/03/24/tibble-1-0-0/#tibbles-vs-data-frames

-   Es un ejemplo de una biblioteca ofreciendo objetos o funciones ya existentes, pero modificados/mejorados

:::

-   Los `tibbles` son *data frames* con propiedades mejoradas, especialmente para conjuntos de datos grandes: p.e., su visualización

:::: {.columns}

::: {.column width="40%"}
```{r}
library(tidyverse)
```

:::

::: {.column width="20%"}

:::

::: {.column width="40%"}
```{r}
mtcars
as_tibble(mtcars)
```

:::

::::


::: {.notes}

- Algunas mejoras ya se incorporan en R `base`: p.e., el uso de `[[]]` antes solo existía en `tibbles`, no en *data frames*

- También distintos comportamiento: 

  + en *data frames*,  df[,1] y df[[1]] son vectores y df[1] es un data frame
  
  + en *tibbles*, solo df[[1]] es vector, df[,1] y df[1] son tibbles

- `median(iris[,1])` ok, median espera vector, pero no si tibble

:::

-   Se pueden crear con la función `tibble()`

```{r}
tibble(x = 1:5, y = 1, z = x ^ 2 + y)
```

::: {.notes}

- Notar que `tibble()` no usa comillas para generar los nombres

- Tampoco convierte caracteres a factores por defecto (r4ds)

- Para crear por filas, ver `tribble()`

- tibble es un data frame que permite complejos listas en las columnas ver nest() unnest()
:::

-->


## Limpieza y "doma" de datos <!-- ("data wrangling")-->

<!--
 o "data munging"
 -->
 
<center>
![](figure/data-science-wrangle.png){width=55%}
</center>

* Un análisis de datos adecuado requiere (mucho) tiempo <!--previo--> de [trabajo "sucio"](https://www.nytimes.com/2014/08/18/technology/for-big-data-scientists-hurdle-to-insights-is-janitor-work.html) 
<!--  pero es clave para obtener información útil en la toma de decisiones -->

* <!--El meta-paquete--> `tidyverse` incluye una colección de bibliotecas con herramientes eficientes para el proceso de "tratamiento de datos" ("data wrangling")

<!-- ofrece herramientas eficientes inspiradas en <!--declaraciones de--> <!--consulta **SQL** -->
<!-- (basadas en una *gramática de manipulación de datos*) -->

* La mayoría de operaciones pueden realizarse combinando 5 "verbos" <!--: `select()`, `filter()`, `mutate()`, `arrange()` y `summarize()` (más `%>%` y `group_by()`)-->

* Todos tienen como primer argumento un *data frame*, los siguientes describen qué hacer (con columnas o filas) y devuelven otro *data frame*

<!--

The github repo for [`dplyr`](https://github.com/hadley/dplyr) 

  * https://tidyr.tidyverse.org/

  * introductory vignette: `vignette("dplyr", package = "dplyr")`  <----- MUY BUENA REFERENCIA
  
  * Hadley Wickham's [Introduction to dplyr Vignette](https://github.com/hadley/dplyr/blob/master/vignettes/dplyr.Rmd), 
  
  [*R for data science*](http://r4ds.had.co.nz/transform.html), 
  
  * MDSR.
  
  * Joplin: Data Manipulation
  
   data.table dtplyr 
   
   vignette("two-table").
   
   
   
   -----
   https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html
   https://www.tidyverse.org/blog/2021/08/teach-tidyverse-2021/
   https://www.r-bloggers.com/2021/05/data-manipulation-techniques-with-dplyr/
   https://www.r-bloggers.com/2021/04/tidyverse-in-r-complete-tutorial/
   
   
         <http://www.stat.pitt.edu/sungkyu/course/pds/material/Lec10.html>
      https://beanumber.github.io/tidy-databases/tidy_databases_slides.html

https://www.r-bloggers.com/2022/07/eight-r-tidyverse-tips-for-everyday-data-engineering/
-->


<!--
## Los cinco verbos

* La mayoría de operaciones en una tabla de datos pueden realizarse combinando cinco "verbos":

<!--
1. `select()`
2. `filter()`
3. `mutate()` (y `rename()`)
4. `arrange()`
5. `summarize()`
-->


<!--
 Entre la colección de [chuletas](https://rstudio.com/resources/cheatsheets/) existe una de [transformación de datos](https://raw.githubusercontent.com/rstudio/cheatsheets/master/translations/spanish/data-transformation_Spanish.pdf). 


También se pueden encontrar online esta y otras chuletas de R y RStudio [aquí](https://www.rstudio.com/resources/cheatsheets/); notad que existen versiones en castellano de algunas de ellas.

<http://dplyr.tidyverse.org/> vignette("dplyr"). notar data.table dtplyr vignette("two-table").
-->


<!--
## `dplyr` frente R `base`

* sencillez, rapidez con big data, estilo SQL etc.

1.  select()  =  data[, c("name") / pos] 
              =  subset()

2.  filter()  =  data[c("name") / pos, ] 
              =  subset()

3.  mutate()  = data$newvar <- 
              = with(data, newvar = y - x)

4.  arrange() = order()
              [sort() es para vectores]

5.  summarize() = aggregate(data,income, FUN=mean)

6. groub_by() %>% summarize = aggregate(data,income~año, FUN=mean)

-->

```{r}
#| echo: FALSE
#| eval: FALSE
library(tidyverse)

data("presidential")
presidential
as.data.frame(presidential)

```


## Seleccionar variables y filtrar filas

```{r,  echo = FALSE}
presidential
```

:::: {style="display: flex;"}

::: {}

1.- `select()`: selecciona variables por nombres o posiciones de columnas, separados por comas

<center>
![](figure/select.png){width=85%}
</center>

```{r}
select(presidential, name, party)
select(presidential, 1:2, 4)
```


```{r echo=FALSE}
presidential[,c("name", "party")]
presidential[,c(1:2,4)]
```

:::

::: {}
$\hspace{1cm}$
:::

::: {}
2.- `filter()`: conserva filas en las que la *condición lógica* es verdadera

<!--(o condiciones separadas por comas). -->



<center>
![](figure/filter.png){width=85%}
</center>


```{r}
filter(presidential, party == "Republican")
```

```{r echo=FALSE}
subset(presidential, party == "Republican")
presidential[presidential$party == "Republican",]

```


::: 

::::

<!--
* Recuperar sólo los nombres y partidos de estos presidentes
  - el primer argumento para  `select()` es el *data frame*
  - luego una lista de nombres de columnas, separados por comas. 
-->

<!--
* Recuperar sólo a los presidentes republicanos, utilizamos `filter()`
  - el primer argumento para `filter()` es un *data frame*
  - luego  *condiciones lógicas* evaluados en la columna involucrada.
-->



* Se pueden combinar (**anidar**) 
<!-- `filter()` y `select()`  -->
porque ambas toman y devuelve un *data frame*, pero así son difíciles de leer

<!--: ej., <!--nombres de --><!--presidentes demócratas desde 1973 -->

```{r}
select(filter(presidential, start > 1973 & party == "Democratic"), name)
```

<!-- * Se pueden **anidar** porque toman y devuelve un *data frame*, pero así son difíciles de leer -->

<!--
* La operación `filter()` se puede **anidar** dentro de la operación `select()`, porque cada verbo toma y devuelve un *data frame*

* Estas largas expresiones se vuelven muy difíciles de leer
-->


```{r echo=FALSE}
paso1 <- filter(presidential, start > 1973 & party == "Democratic")
select(paso1, name)
class(paso1)
```


<!--
## Anidamiento. El operador de tubería `%>%` 
-->

## El operador de tubería `%>%` 


```{r echo=FALSE}
paso1 <- presidential %>% filter(start > 1973 & party == "Democratic")
paso1 %>% select(name)
```

* `datos %>% filter(condition)` equivale a `filter(datos, condition)`


* El anidamiento es fácil:<br>
<tab><tab> - Tomar `presidential` y pasarlo a filtrar (produce un nuevo *data frame*); <br>
<tab><tab> - Tomar este resultado y pasarlo a seleccionar.

```{r}
presidential %>% 
  filter(start > 1973 & party == "Democratic") %>% 
  select(name)
```

<!--
* `ggplot2` uwa `+` en lugar de `%>%` (desarrollado antes)
-->

* Atajo de teclado: `Cmd / Ctrl + Mays + M `

* Se puede aplicar a cualquier función <!-- que hemos visto anteriormente (no solo verbos de manipulación de datos)-->
```{r}
10 %>% log()               # = log(10)
presidential %>% head(2)   # = head(presidential, 2)
lm(data = mtcars, mpg ~ hp) %>%  summary()
```

```{r echo=FALSE}
sin(cos(log(10)))
10 %>% log() %>% cos() %>% sin()

10 |> log()
lm(data = mtcars, mpg ~ hp) |>  summary()

```

<!--
 Legibilidad sin almacenar resultados intermedios
-->

## Crear nuevas variables 

:::: {style="display: flex;"}

::: {}

3.-`mutate()`: añade nuevas columnas, creando <!-- (o redefinir)--> variables según una **fórmula** a partir de otras

<center>
![](figure/mutate.png){width=95%}
</center>

:::

::: {}

+ también `rename()`: cambiar el nombre de una columna <!--de un *data frame*;-->

  <center>
  ![](figure/rename.png){width=70%}
::: 

::::


```{r}
mypresidents <- presidential %>%                 # evitar "machacar" una fuente original
                  mutate(duracion = end - start) 

presidential %>% mutate(sigloXXI = start > 2000,
                        duracion = end - start,
                        duracio2 = duracion*2   )  # crear varias separadas por comas

presidential %>% rename(nombre = name) 
```

```{r}
#| echo: FALSE
#| eval: FALSE
presidential$duracion <- presidential$end-presidential$start


presidential %>% mutate(nombre = name) %>% select(-1) 
```


<!--
  - Un buen estilo crear un nuevo objeto en lugar de "machacar" una fuente externa

  -  puedes hacer referencia a las columnas que acabas de crear:

-->

## Ordenar filas

:::: {style="display: flex;"}

::: {}

4.- `arrange()`: re-ordena las filas todas las columnas de un *data frame*

* en orden ascendente (por defecto) o descendente con `desc()`

<!--
* similar a Excel

* sort() es para un vector
-->

:::

::: {}

<center>
![](figure/arrange.png){width=75%}
</center>


:::

::::



```{r echo=F}
mypresidents
mypresidents %>% arrange(duracion)
```


```{r}
mypresidents %>% arrange(desc(duracion))           
mypresidents %>% arrange(desc(duracion), party) # primero ordena por duración 
                                                # en casos de empate, por party
```

<!--
con más de una variable, por orden en caso de empate: clasificar adicionalmente por otra variable, `start`.

OJO: desc(): transforma en negativo
-->


## Resumir todo el conjunto de datos

5.- `summarize()`: colapsa valores de un *data frame* en una sola fila resumen 

<center>
![](figure/summarise.png){width=60%}
</center>

* Especificando *cómo* se reducirá una columna entera de datos en un solo valor. 


```{r echo=FALSE}
library(lubridate)
mypresidents %>%
  summarize(media_duracion = mean(duracion),
            min_duracion   = min(duracion)  )
```

```{r}
library(lubridate)
mypresidents %>%
  summarize(media_duracion = mean(duracion),
            N = n(),                         # n() cuenta número total de filas
            first_year = min(year(start)),   # year() extrae el año de una fecha
            num_dems = sum(party == "Democratic") )
```

```{r echo=FALSE}
mypresidents %>% mutate(dem = party=="Democratic") %>% 
  summarize(num_dem = sum(dem),
            total_dias = sum(duracion))

```

* `summarize()` suele usarse en conjunción con `group_by()`

## `group_by()`

* `group_by()`:  cambia el alcance de *cada función* para que no actúe sobre todo el *data frame* sino en grupos individuales <!--de grupo en grupo.--> 

* ¿Cuál es la duración media de los demócratas y de los republicanos? Hacerlo <!--para cada partido--> por separado no es eficiente:  <!--usaremos `summarize()` pero especificando--> especificamos que las filas <!--del *data frame*--> deben ser agrupadas <!--por los valores de esa variable-->

```{r echo=FALSE}
mypresidents %>% summarize(N = n(), media_duracion = mean(duracion))

mypresidents %>% filter(party == "Democratic") %>%  summarize(N = n(), media_duracion = mean(duracion))
mypresidents %>% filter(party == "Republican") %>%  summarize(N = n(), media_duracion = mean(duracion))
```


```{r}
mypresidents %>% group_by(party) %>%          # "marca" dos grupos en los datos 
  summarize(N = n(),                          # incluye estas variables 
            media_duracion = mean(duracion))  # mas las de group_by()
```

<!--
* Ver  `mypresidents %>% group_by(party)`: tibble muestra que hay dos grupos

* `group_by()` similar a facet
-->


* Nuevo *data frame* con distinto nivel de observación (fila):  una fila para cada valor de la variable por la que se agrupa  (ej., de presidentes a partidos)

<!--
  * datos de información/ventas por empleado a información por tienda
  
  * DEBEN INCLUIRSE variables que se quieran mantener
-->

*  `ungroup()` elimina la agrupación: volvemos a operar en datos desagrupados 

```{r}
mypresidents %>% group_by(party) %>% mutate(media_duracion = mean(duracion)) %>% 
  ungroup() %>% arrange(duracion) %>%  slice(1)
```

```{r echo=FALSE}
mypresidents %>% mutate(media_dur = mean(duracion)) %>% arrange(duracion) %>%  slice(1)

mypresidents %>% group_by(party) %>% mutate(media_duracion = mean(duracion)) %>% arrange(duracion) %>%  slice(1)

mypresidents %>% group_by(party) %>% mutate(media_duracion = mean(duracion)) %>% ungroup() %>% arrange(duracion) %>%  slice(1)
```


## Seleccionar muchas variables 

```{r}
library(nycflights13)           # incluye flights:  19 variables
select(flights, year:arr_time)    # desde variable "year" hasta "arr_time"
select(flights, -(year:day))      # todas menos "year, month, day"
```

<!--
* Seleccionar unas pocas variables es fácil:  `select(flights, year, month, day)`
-->

* Funciones a utilizar dentro de `select()`:
    + `starts_with("abc")`: nombres que comienzan con "abc".
    + `ends_with("xyz")`: nombres que acaban con "xyz".
    + `contains("ijk")`: nombres que contienen "ijk".
    + `num_range("x", 1:3)`: para x1, x2 y x3.
    + `matches()`: nombres que coinciden con una [expresión regular](https://es.wikipedia.org/wiki/Expresi%C3%B3n_regular)

```{r echo=FALSE}
presidential %>% select(party, everything())   # everything(): útil para reordenar
```

 
 <!--
    + `matches("(.)\\1")`: selecciona las variables que coinciden con una expresión regular (en este caso, cualquier variable que contenga caracteres repetidos).
-->

## ¿Cómo tratar los ("contagiosos") `NA`?
<!-- valores `NA`? -->

* Eliminar observaciones con valores ausentes, PERO

    - en *alguna variable*, con `na.rm=TRUE` o `filter(!is.na(x))` o `drop_na(x)` 

    - en *todo* el conjunto de datos con `drop_na()`

<!-- 
 en `cor()`, `use = "complete.obs"`
-->

```{r echo=FALSE}
data <- tibble(x1 = c(1:4, NA, 6.0, 7, NA), x2 = c(NA, 12:14, NA, 16.0, 17:18) )

data %>% summarize(num = n(), meanNA = mean(x1), mean = mean(x1, na.rm = TRUE))

data %>% filter(!is.na(x1)) %>% 
  summarize(num = n(), meanNA = mean(x1), mean   = mean(x1, na.rm = TRUE))
```


```{r}
data <- tibble(x1 = c(1:4, NA, 6.0, 7, NA), x2 = c(NA, 12:14, NA, 16.0, 17:18) )

data %>% summarize(num = n(), meanNA = mean(x1), mean = mean(x1, na.rm = TRUE))

data %>% drop_na(x1) %>% summarize(num = n(), mean = mean(x1))   # drop_na(x2)?
data %>% drop_na()   %>% summarize(num = n(), mean = mean(x1))
```

* Reemplazar con un valor, PERO ¿cúal?

<!--
* NA por no presentarse a un examen es cero

* NA por no contestar a pregunta de renta o gasto es ¿cero?
-->


```{r}
data %>% mutate(x1 = if_else(is.na(x1), 0, x1)) %>% summarize(num = n(), mean = mean(x1))
data %>% mutate(x1 = replace_na(x1,0))          %>% summarize(num = n(), mean = mean(x1))
```


<!--
na.omit() vs. drop_na: el primero es de base (stats) el otro de tidyr
-->

## Algunos verbos adicionales

* `slice()`, `slice_sample()`: extrae filas por posición o aleatoriamente

```{r echo=T}
mypresidents %>% slice(1, 4)
```

<!--
   - `slice_head()`, `slice_tail()`, `slice_min()`, `slice_max()`
-->

* `distinct()`: extrae sólo las filas únicas (una o varias variables)
 
```{r echo=T}
mypresidents %>% distinct(party)
```

<!--
  - transmute(): como mutate() pero solo mantiene las variables creadas
  
  - relocate(): cambiar orden de columnas
-->


* `count()`: cuenta los valores únicos de una o más variables

```{r echo=TRUE}
mypresidents %>% count(party)    # mypresidents %>% group_by(party) %>% summarize(n=n())
mypresidents %>% count(party, sort = TRUE)
```

```{r echo=FALSE}
flights %>% group_by(tailnum) %>% summarize(n = n()) %>% arrange(desc(n))
flights %>% count(tailnum, sort = TRUE) 
```

<!--
* `count()` también puede realizar recuentos "ponderados" 
  
   sustituye n() por sum() de la variable de ponderación
   
```{r}
flights %>% count(tailnum, wt = dep_delay)   # suma de retrasos acumulados 

flights %>% group_by(tailnum) %>% summarize(n = sum(dep_delay))
```  
 -->

* `across()`: aplica la misma transformación a múltiples columnas

```{r}
flights %>% mutate(across(air_time:distance, ~ log(.x)+1))
flights %>% mutate(across(is.character, ~ parse_factor(.x)))
```

```{r, echo=FALSE}
flights %>%
  summarise(across(where(is.integer), n_distinct))
flights %>%
  summarise(across(where(is.integer), ~ sum(.x, na.rm = TRUE)))
```


<!--
Para trabajar con factores:

# using factors
x <- factor(rep(LETTERS[1:15], times = c(20,15,23,2,4,3,1,1,1,5,2,8,3,1,1))) 
x %>% table()

x %>% 
fct_lump_n(5) %>% 
table()

# or alternatively
# x %>% fct_lump_min(5) %>% table()

## result:
>   A     B     C     J     L Other 
>  20    15    23     5     8    19

# great for displaying
# using ggplot to show top 5 frequent carriers and "other" group
flights %>%
  mutate(name = fct_lump_n(carrier, 5)) %>%
  count(name) %>%
  mutate(name = fct_reorder(name, n)) %>%
  ggplot(aes(x=name, y=n)) +
  geom_col()
-->

<!-- ## Funciones útiles para crear variables -->
## Funciones para crear variables 

* Operadores aritméticos: `+`, `-`, `*`, `/`, `^`, `%/%` (división entera), `%%` (resto)

  - combinados con otros: <!--funciones de "agregación":--> `x - mean(x)`, `y - sum(y)`
  
* Logartimos, `log()`, retardos, `lag()`, adelantos, `lead()`, etc.

<!--
  - diferencia móvil, `x - lag(x)`, 
  - ¿cambian el valor? `x! = lag (x)`
-->

* Agregados acumulativos y móviles: ver ayuda de `cumsum()`  y `cummean()`

```{r echo=FALSE}
cumsum(1:10)
cumprod(1:10)
cummin(1:10)
cummax(1:10)
cummean(1:10)
```

* Comparaciones lógicas: `<`, `<=`, `>`, `>=`, `!=` 

* Ordenamiento: `min_rank()`, `row_number()` y otras de `dplyr::ranking` 

<!--, `percent_rank()`, `cume_dist()`-->

```{r}
y <- c (10, 2, 2, NA, 30, 4)
min_rank(y)               
min_rank(desc(y))
row_number(y)
```

## Funciones para crear variables (cont.)

* `if_else()`: ejecución condicional (también `case_when()`)
```{r}
flights %>% mutate(retraso = if_else(dep_delay > 0, "tarde", "bien")) %>% select(6,20)  

flights %>% mutate(retraso = if_else(dep_delay > 0, "tarde",             # encadenados
                                        if_else(dep_delay <0, "bien", "normal")))
```

```{r, echo=FALSE}
flights %>%
  group_by(carrier) %>%
  mutate(new_classification = case_when(
    (origin == "EWR") & (dep_delay <= 0) ~ "EWR with negative delay",
    (origin == "EWR") & (dep_delay > 0) ~ "EWR with positive delay",
    (origin == "JFK") ~ "Stats for JFK Airport",
    (origin == "LGA") &  (air_time <= 220) ~ "La Guardia under 6 hours flights",
    TRUE   ~ "La Guardia above 6 hours flights"
  )) %>%
  count(new_classification) %>%
  ungroup()
```


* Nota: `retraso` debería convertirse a factor

<!--  
- mejora `if.else()` 
- alternativa replace()

mutate(Quantity = replace(Quantity, Quantity<=0, NA), UnitPrice = replace(UnitPrice, UnitPrice<=0, NA))

-->
  
* Discretizar variables<!--numéricas a categóricas-->: `cut_interval()`, `cut_number()`, `cut_width()`

```{r echo=FALSE}
flights %>% mutate(retraso = cut_width(dep_delay,2))   # retraso es factor
```

* Nota: `dplyr` tiene muchas funciones equivalentes a otras de R base:

    - `parse_number()`, `parse_factor()`, etc. por `as.number()`, `as.factor()`, etc.
    - `bind_cols()` y `bind_rows()` por `cbind()` y `rbind()`


## Funciones de resumen útiles

* Medidas de centralidad y de dispersión: `mean(x)`, `median(x)`, `sd(x)`, `IQR(x)`, `mad(x)`

* Medidas de rango: `min(x)`, `quantile(x, 0.25)`, `max(x)`

* Medidas de posición: `first(x)`, `nth(x, 2)`, `last(x)`. 

  - similar a `x[1]`, `x[2]` y `x[length(x)]`  

* Conteos: 

  - `n()`: observaciones totales (tamaño del grupo)
  
  - `sum(!is.na(x))`: observaciones no ausentes
  
  - `n_distinct(x)`:  filas distintas en `x`
  
  <!-- más rápido que unique() -->

