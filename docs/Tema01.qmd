---
title: "Tema 01 - Visualización de datos"
subtitle: "La Gramática de Gráficos para Análisis Económico"
author:  
    - "Pedro Albarrán"
    - "Alberto Pérez"
institute: "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
format:
  revealjs:
    logo: figure/by-nc-sa2.png
    titlegraphic: figure/by-nc-sa.png
    theme:  
        - beige
        - custom.scss
    smaller: true
    scrollable: true
    embed-resources: true
    slide-number: true
    show-slide-number: all
    transition: slide
    background-transition: fade
    progress: true
    height: 800
    width: 1200
    show-notes: false  # Las notas no se muestran por defecto
    notes-format: html # Formato de las notas
execute:
  enabled: true      # execute code chunks
  eval: false        # by default, don't evaluate code chunks
  echo: true         # show code
  warning: false     # don't show warnings (redundant to eval: false)
  message: false     # don't show messages (idem)
  output: false      # don't show output (idem)
  fig.show: hide     # don't show figures (idem)
knitr:
  opts_chunk:         # OJO: reduntant to execute:
    results: hide     # ni muestra resultados ni figuras
    fig.show: hide
lang: es
strip-comments: true
toc: false
toc-depth: 2
toc-expand: false
toc-title: "Contenidos"
css: styles.css
---

```{r setup}
#| include: false
# se evalua pero no incluye output (mensajes, etc.)

# Elimino todo del Entorno (del documento)
rm(list = ls())

# Working directory
#setwd("/home/albarran/Dropbox/ECMTII/ECMTII/Slides_2023")

# Cargo todas las bibliotecas necesarias
# (se podría hacer cuando cada una sea necesaria)
library(tidyverse)
library(rio)
library(kableExtra)
library(rmarkdown)
```

```{r generar-datos}
#| echo: false

library(tidyverse)

# Crear directorio para datos si no existe
if (!dir.exists("data")) dir.create("data")

set.seed(123)

# ========================================
# DATASET 1: VENTAS EMPRESARIALES
# ========================================
# Variables:
# - region: Norte, Sur, Este, Oeste (factor geográfico)
# - producto: Electrónicos, Ropa, Hogar, Deporte (líneas de producto) 
# - ventas: Ventas en miles de euros (variable continua)
# - marketing: Inversión en marketing en miles de euros
# - satisfaccion: Satisfacción del cliente (escala 1-5)
# - trimestre: Q1, Q2, Q3, Q4 (factor temporal)

ventas <- data.frame(
  region = rep(c("Norte", "Sur", "Este", "Oeste"), times = c(150, 75, 110, 65)),
  producto = rep(c("Electrónicos", "Ropa", "Hogar", "Deporte"), times = c(120, 60, 140, 80)),
  ventas = rnorm(400, mean = 50, sd = 15) ,
  marketing = rnorm(400, mean = 8, sd = 3),
    trimestre = sample(c("Q1", "Q2", "Q3", "Q4"), 400, replace = TRUE)
) %>%
  mutate(
    ventas = ventas + 
           ifelse(region == "Norte", 20, ifelse(region == "Oeste", 40, 0)) +
           ifelse(producto == "Electrónicos", 20, ifelse(producto == "Deporte", 10, 0)),
    ventas = pmax(ventas, 10), # evitar valores negativos
    marketing = pmax(marketing, 1),
    satisfaccion = sample(1:5, 400, replace = TRUE), # entre 1-5
    # Añadir correlación realista entre marketing y ventas
    ventas = ventas + 2 * marketing + rnorm(400, 0, 5)
  ) %>%
  mutate(across(c(region, producto, trimestre), as.factor))

# ========================================
# DATASET 2: INDICADORES MACROECONÓMICOS
# ========================================
# Variables:
# - pais: Nombre del país
# - pib: PIB per cápita en euros
# - desempleo: Tasa de desempleo en porcentaje
# - inflacion: Tasa de inflación anual en porcentaje  
# - deuda: Deuda pública como % del PIB
# - norte: Si pertenece al Norte de Europa (Sí/No)
# - tipo: Clasificación económica (Desarrollada)

macro <- data.frame(
  pais = c("España", "Francia", "Alemania", "Italia", "Portugal", "Grecia", 
           "Países Bajos", "Bélgica", "Austria", "Finlandia", "Irlanda", "Luxemburgo"),
  pib = c(27500, 49500, 66200, 32400, 23400, 17700, 
          58900, 52500, 55400, 54300, 79000, 120600),
  desempleo = c(13.8, 8.1, 3.6, 10.2, 6.6, 17.9, 4.9, 6.2, 4.8, 7.4, 5.1, 5.6),
  inflacion = c(3.1, 2.8, 3.2, 1.9, 1.3, 2.1, 2.9, 3.3, 3.0, 2.1, 2.4, 3.1),
  deuda = c(118, 112, 69, 150, 127, 193, 52, 108, 83, 73, 59, 24),
  norte = c("No", "Sí", "Sí", "No", "No", "No", 
            "Sí", "Sí", "Sí", "Sí", "Sí", "Sí"),
  poblacion = c(47, 68, 83, 60, 10, 11, 17, 12, 9, 5, 5, 0.6)
  ) %>%
  mutate(norte = as.factor(norte))

# ========================================
# DATASET 3: COMPORTAMIENTO DEL CONSUMIDOR
# ========================================
# Variables:
# - edad: Edad en años
# - genero: Hombre, Mujer, Otro
# - ingresos: Ingresos anuales brutos en euros
# - gasto: Gasto anual en productos/servicios en euros
# - canal: Online, Tienda_fisica, Ambos (canal preferido)
# - segmento: Premium, Estándar, Económico (segmento de cliente)
# - frecuencia: Semanal, Mensual, Trimestral, Anual (frecuencia de compra)
# - ciudad: Grande, Mediana, Pequeña (tamaño de ciudad)

clientes <- data.frame(
  edad = sample(18:70, 300, replace = TRUE),
  genero = sample(c("Hombre", "Mujer", "Otro"), 300, replace = TRUE, prob = c(0.48, 0.48, 0.04)),
  ingresos = rnorm(300, mean = 35000, sd = 12000),
  canal = sample(c("Online", "Tienda_fisica", "Ambos"), 300, replace = TRUE, 
                 prob = c(0.45, 0.35, 0.20)),
  segmento = sample(c("Premium", "Estándar", "Económico"), 300, replace = TRUE, 
                    prob = c(0.2, 0.5, 0.3)),
  frecuencia = sample(c("Semanal", "Mensual", "Trimestral", "Anual"), 300, replace = TRUE,
                      prob = c(0.1, 0.4, 0.3, 0.2)),
  ciudad = sample(c("Grande", "Mediana", "Pequeña"), 300, replace = TRUE,
                  prob = c(0.4, 0.35, 0.25))
) %>%
  mutate(
    ingresos = pmax(ingresos, 15000), # salario mínimo
    # Gasto correlacionado con ingresos y segmento
    gasto = case_when(
      segmento == "Premium" ~ ingresos * 0.15 + rnorm(300, 0, 500),
      segmento == "Estándar" ~ ingresos * 0.08 + rnorm(300, 0, 300),
      segmento == "Económico" ~ ingresos * 0.05 + rnorm(300, 0, 200)
    ),
    gasto = pmax(gasto, 500) # gasto mínimo
  ) %>%
  mutate(across(c(genero, canal, segmento, frecuencia, ciudad), as.factor))

# ========================================
# DATASET 4: SERIES TEMPORALES DE VENTAS
# ========================================
# Variables:
# - fecha: Fecha (mensual, desde 2020-01 hasta 2023-12)
# - region: Norte, Sur, Este, Oeste
# - ventas: Ventas mensuales en euros
# - estacion: Invierno, Primavera, Verano, Otoño (factor estacional)

fechas <- seq(as.Date("2020-01-01"), as.Date("2023-12-01"), by = "month")
ventas_tiempo <- expand.grid(
  fecha = fechas,
  region = c("Norte", "Sur", "Este", "Oeste")
) %>%
  mutate(
    mes = as.numeric(format(fecha, "%m")),
    año = as.numeric(format(fecha, "%Y")),
    # Tendencia creciente + estacionalidad + ruido
    ventas = 50000 + 
             1000 * (año - 2020) + # tendencia
             5000 * sin(2 * pi * mes / 12) + # estacionalidad
             rnorm(nrow(.), 0, 3000), # ruido
    estacion = case_when(
      mes %in% c(12, 1, 2) ~ "Invierno",
      mes %in% c(3, 4, 5) ~ "Primavera", 
      mes %in% c(6, 7, 8) ~ "Verano",
      mes %in% c(9, 10, 11) ~ "Otoño"
    )
  ) %>%
  mutate(ventas = pmax(ventas, 20000)) %>%
  mutate(across(c(region, estacion), as.factor)) %>%
  select(fecha, region, ventas, estacion) # mantener solo las variables principales

# ========================================
# GUARDAR ARCHIVOS
# ========================================

# ========================================
# INFORMACIÓN DE VARIABLES (DATAFRAMES)
# ========================================

ventas_info <- data.frame(
  variable = c("region", "producto", "ventas", "marketing", "satisfaccion", "trimestre"),
  descripcion = c(
    "Región geográfica (Norte, Sur, Este, Oeste)",
    "Línea de producto (Electrónicos, Ropa, Hogar, Deporte)",
    "Ventas en miles de euros",
    "Inversión en marketing en miles de euros",
    "Puntuación de satisfacción del cliente (escala 1-5)",
    "Trimestre del año (Q1, Q2, Q3, Q4)"
  ),
  tipo = c("Factor", "Factor", "Numérica", "Numérica", "Numérica", "Factor")
)

macro_info <- data.frame(
  variable = c("pais", "pib", "desempleo", "inflacion", "deuda", "norte", "poblacion"),
  descripcion = c(
    "Nombre del país",
    "PIB per cápita en euros",
    "Tasa de desempleo en porcentaje",
    "Tasa de inflación anual en porcentaje",
    "Deuda pública como % del PIB",
    "Norte de Europa (Sí/No)",
    "Población (millones de personas)"
  ),
  tipo = c("Carácter", "Numérica", "Numérica", "Numérica", "Numérica", "Factor", "Numérica")
)

clientes_info <- data.frame(
  variable = c("edad", "genero", "ingresos", "gasto", "canal", "segmento", "frecuencia", "ciudad"),
  descripcion = c(
    "Edad en años",
    "Género (Hombre, Mujer, Otro)",
    "Ingresos anuales brutos en euros",
    "Gasto anual en productos/servicios en euros",
    "Canal de compra preferido (Online, Tienda_fisica, Ambos)",
    "Segmento de cliente (Premium, Estándar, Económico)",
    "Frecuencia de compra (Semanal, Mensual, Trimestral, Anual)",
    "Tamaño de ciudad de residencia (Grande, Mediana, Pequeña)"
  ),
  tipo = c("Numérica", "Factor", "Numérica", "Numérica", "Factor", "Factor", "Factor", "Factor")
)

ventas_tiempo_info <- data.frame(
  variable = c("fecha", "region", "ventas", "estacion"),
  descripcion = c(
    "Fecha mensual (2020-01 a 2023-12)",
    "Región geográfica (Norte, Sur, Este, Oeste)",
    "Ventas mensuales en euros",
    "Estación del año (Invierno, Primavera, Verano, Otoño)"
  ),
  tipo = c("Fecha", "Factor", "Numérica", "Factor")
)

# Guardar todos los datasets e información en un solo archivo RData
save(ventas, macro, clientes, ventas_tiempo, 
     ventas_info, macro_info, clientes_info, ventas_tiempo_info, 
     file = "data/datosVisualizacion.RData")
```


## ¿Por qué visualizar datos?

<!-- ## ------------------------------------------------------------------- -->
:::: {.notes}

**Objetivos de Aprendizaje**

Al finalizar este tema, serás capaz de:

- Comprender los **principios fundamentales** de la visualización de datos
- Usar la **gramática de gráficos** implementada en ggplot2
- Crear **visualizaciones efectivas** para análisis exploratorio
- Aplicar **buenas prácticas** en la comunicación visual de datos

::::

<!-- ## ------------------------------------------------------------------- -->


- **Resumir información** <!--de manera intuitiva--> que no se vería en los datos en bruto (hoja de cálculo)

- **Identificar patrones** y relaciones entre variables

- **Comunicar hallazgos** de forma efectiva a diferentes audiencias  

. . .

- La visualización es esencial en:

  - *Bancos Centrales*: dashboard de indicadores macroeconómicos
  - *Consultoras*: presentaciones ejecutivas con insights de datos
  - *Investigación*: trabajos con gráficos que demuestran hipótesis
  - *Medios*: The Economist, Financial Times - visualización como marca
  - *Empresas*: dashboards de KPIs, segmentación de clientes

- En un buen gráfico, la audiencia encuentra obvias las ideas a transmitir, sin *abrumar* con muchos hallazgos

## `ggplot2` y la Gramática de Gráficos

- Componentes básicos:

  - *Datos*

  - *Estéticas (aes)*: asocia variables a propiedades visuales (posición, longitud, área, color)

  - *Geometrías (geom)*: objetos para representar datos (líneas, círculos, barras)

  - *Escalas*, *Sistemas de coordenadas*, *Facetas* (subgráficos), *Contexto* (títulos, leyendas), etc.

- Construir gráficos como frases gramaticales

  - sujeto + verbo + objeto = oración

  - datos +  geometría + estética = gráfico de `ggplot2`

<!-- ## ------------------------------------------------------------------- -->

:::: {.notes}

**Elementos Básicos de un Gráfico**

1. Señales Visuales (Aesthetics)

  - **Posición**: ubicación en ejes x, y
  - **Color**: matiz para distinguir categorías o magnitudes
  - **Tamaño**: área/radio para representar magnitudes
  - **Forma**: símbolos diferentes para categorías
  - **Transparencia**: nivel alpha para densidad o solapamiento

2. Sistema de Coordenadas

  - Cartesiano (por defecto)
  - Polar: `coord_polar()`  
  - Geográfico: `coord_map()`

3. Escala

  - Numérica lineal, logarítmica
  - Categórica, temporal
  - ¿Cómo se traduce la distancia en algo con significado?

4. Contexto

- Títulos, leyendas, puntos/líneas de referencia

::::

<!-- ## ------------------------------------------------------------------- -->


**"Por encima de todo, mostrar los datos"**


## Creando un "ggplot"

```{r cargar}
library(ggplot2)
load("data/datosVisualizacion.RData")
```

. . .

- Solo `ggplot()`  crea un gráfico vacío

```{r ejemplo-basico0}
ggplot(data = ventas)
```

- `aes()` define **cómo las variables se asignan a propiedades visuales**

```{r ejemplo-basico1}
ggplot(data = ventas, aes(x = marketing, y = ventas))
```

- Añadir capas con `+`: objeto geométrico `geom_point()`

```{r ejemplo-basico2}
ggplot(data = ventas, aes(x = marketing, y = ventas)) + 
  geom_point()
```

. . .

- **NOTAR**: datos y estética para *todas* las capas o solo para una

```{r ejemplo-alternativo}
ggplot(data = ventas) + 
  geom_point(aes(x = marketing, y = ventas))
```

```{r ejemplo-alternativo2}
#| echo: false
ggplot(data = ventas) + 
  geom_point(mapping = aes(x = marketing, y = ventas))
```


## Objetos Geométricos

Cada `geom_*()` agrega un tipo diferente de capa: 


| Tipo | Función | Uso Habitual |
|------|---------|---------------|
| **Puntos** | `geom_point()` | Dispersión |
| **Líneas** | `geom_line()` | Evolución temporal |
| **Barras** | `geom_bar()` | Frecuencias categóricas |
| **Histograma** | `geom_histogram()` | Distribución continua |
| **Cajas** | `geom_boxplot()` | Estadísticos descriptivos |
| **Suavizado** | `geom_smooth()` | Tendencias |
| **Texto** | `geom_text()` | Etiquetas |

Para lista completa: buscar funciones que comienzan con `geom_` en Ayuda

## Asociación Estética, con `aes()`

:::: {.notes}

Elementos estéticos son "algo que se puede ver" (información)

::::

- Cada `aes()` es una asociación entre una **señal visual** y una **variable**:

  |                           |        |                                       |
  |---------------------------|--------|---------------------------------------|
  | **posición**: `x`, `y`    | &#124; | **forma**: `shape`                    |
  | **color**: color exterior | &#124; | **relleno**: `fill` (color interior)  |
  | **tamaño**: `size`        | &#124; | **tipo de línea**: `linetype`         |

:::: {.notes}
  - **posición**: `x`, `y`  
  - **color**: color exterior
  - **relleno**: `fill` (color interior)
  - **forma**: `shape` (de los puntos)
  - **tipo de línea**: `linetype`
  - **tamaño**: `size`
::::

- Algunas estéticas son solo adecuadas para variables cuantitativas o para cualitativas
- Cada `geom` acepta solo un subconjunto de estéticas (ver ayuda)

- **Regla de oro**: Si quieres que algo varíe con los datos, ponlo en `aes()`

```{r ejemplo-esteticas}
ggplot(ventas, aes(x = marketing, y = ventas)) +
  geom_point(aes(color = region))
```



## Asociación Estética vs. Opción Fija

- Con `aes()`, se visualiza una **variable** con una señal visual

```{r mapeo-estetico}
#| echo: false
ggplot(ventas, aes(x = marketing, y = ventas)) +
  geom_point(aes(color = region))
```

- Fuera de `aes()`, se establece un **valor fijo** de la señal visual

```{r opcion-fija}
ggplot(ventas, aes(x = marketing, y = ventas)) +
  geom_point(aes(color = "red"))
```

. . .

- **Principio**: Añadir señal visual para representar información, NO "embellecer"

```{r mapeo-estetico2}
ggplot(macro, aes(y = desempleo, x = pib)) +
  geom_point(aes(color = norte), shape = "diamond")
```

- NO saturar el gráfico con estéticas fijas o información innecesaria

```{r mapeo-estetico3}
ggplot(macro, aes(y = desempleo, x = pib)) +
  geom_point(aes(size = inflacion, color = deuda))

ggplot(macro, aes(y = desempleo, x = pib)) +
  geom_point(shape = "diamond", color = "blue", size = 3)
```

:::: {.notes}
**Nota**: `norte` (carácter) se convierte automáticamente a factor: → escala categórica
::::

<!-- ## ------------------------------------------------------------------- -->

:::: {.notes}

**`esquisse`: Interfaz Gráfica**

`esquisse` implementa visualmente la lógica de `ggplot2`:

- Similar a Tableau, PowerBI, Gapminder
- "Arrastrar y soltar" variables a estéticas

```{r esquisse-demo}
#install.packages("esquisse")
library(esquisse)
esquisser()                         
data("mpg")
esquisser(mpg, viewer = "browser")   
```

**Características:**
- Elegir tipo de gráfico, estéticas, títulos, apariencia
- Genera código R para crear el gráfico  
- Descargar gráfico creado
- Ayuda para aprender cómo hacer las cosas

::::

<!-- ## ------------------------------------------------------------------- -->


## Gráficos como Objetos

- Un gráfico también es un objeto de R

```{r objetos-graficos}
graf_base <- ggplot(macro, aes(y = desempleo, x = pib)) +
                geom_point()
```

- Se pueden agregar capas a este objeto:

```{r capas-objetos}
graf_base + geom_line()
graf_base + geom_point(aes(shape = norte)) 
graf_base + geom_point(aes(size = inflacion, color = deuda))
```


## Datos (y estéticas) específicas por capa

:::: {.notes}
- Recordad: cada capa puede usar **datos** o **estéticas** distintas
::::

#### Ejemplo práctico:

- `geom_text()`: acepta estéticas de etiquetas (variables con texto):
```{r texto}
graf_base + geom_text(aes(label = pais), size = 3)

library(ggrepel)  # Evita solapamiento
graf_base + geom_text_repel(aes(label = pais), size = 3)
```

- Ahora con datos específicos por capa si solo queremos señalar algunos puntos
```{r subconjuntos}
graf_base + 
  geom_text_repel(
    data = subset(macro, 
                  pais %in% c("España","Francia","Alemania")), 
    aes(label = pais), size = 3)
```

- Esta idea se puede **generalizar**: usar distintos datos o estéticas en cada capa según las necesidades del gráfico

## Gráficos que muestran datos transformados

- Algunos gráficos (ej., *dispersión*) muestran los datos originales directamente

```{r transformaciones-originales}
#| echo: false
ggplot(clientes, aes(x = ingresos/1000, y = gasto/1000)) + 
      geom_point()
```

```{r transformaciones-originales2}
#| echo: false
graf_base
```

- Pero otros gráficos representan estadísticas calculadas a partir de los datos

- `geom_boxplot()`: datos → cuartiles, mediana

:::: {.columns}

::: {.column}

```{r boxplot-ejemplo}
ggplot(clientes, 
       aes(y = gasto/1000)) +  
  geom_boxplot()
```

:::

::: {.column}

![](figure/boxplot_spanish.svg){width=60% fig-align="center"}

:::

::::



- `geom_smooth()`: regresión → predicción de línea de tendencia
```{r smoothers}
graf_base + geom_smooth()           # con intervalos de confianza
graf_base + geom_smooth(method = lm, se = FALSE)  
```


:::: {.notes}

* Podríamos agregar la línea de regresión "manualmente"

```{r}
res <- lm(gasto ~ ingreso, data = clientes)
clientes$ingreso_pred <- res[["fitted.values"]]
# graf_base +  geom_line(aes(y = ingreso_pred))  # ERROR: pred.SC no estaba en graf_base

graf_base <- ggplot(clientes, aes(y = gasto, x = ingreso)) + geom_point()
graf_base + geom_line(aes(y = ingreso_pred))
```

* NO necesitamos repetir la estetica de posición `x` para `geom_line()` porque ya está definida en `graf_base`

::::


## Gráficos que muestran datos transformados (cont.)

- `geom_bar()` y `geom_histogram()`: datos → frecuencias por intervalo

- La estadística predeterminada en `geom_bar()` es contar casos (`stat_count`)

  - Notad que en Excel un gráfico de barras requiere los datos previamente transformados (datos contados)

```{r barras}
ggplot(ventas, aes(x = region)) + geom_bar()
```

:::: {.notes}

- Con datos ya transformados, usar `stat = "identity"`:

```{r barras-identity}
# Frecuencias automáticas
ggplot(ventas, aes(x = region)) + geom_bar()

# Valores ya calculados - ventas promedio por región
ventas_promedio <- ventas %>% 
  group_by(region) %>% 
  summarise(venta_media_miles = mean(ventas))

ggplot(ventas_promedio, aes(x = region, y = venta_media_miles)) + 
  geom_bar(stat = "identity")
```

::::


- En variables continuas, no hay categorías "naturales" para calcular frecuencias

  - Se tienen que definir "arbitrariamente" los intervalos
  
  - Distintas elecciones pueden revelar distinta información: p.e., no apreciamos un grupo importante de clientes con muy bajos ingresos en el último gráfico

```{r histograma-parametros}
graf <- ggplot(clientes, aes(x = ingresos/1000))
graf + geom_histogram(bins = 20)              # Número de grupos
graf + geom_histogram(binwidth = 3)           # Ancho de grupos
graf + geom_histogram(breaks = seq(10,90,5))  # Rangos
```


```{r histograma-densidad}
#| echo: false
graf + geom_histogram(aes(y = after_stat(density))) # Densidad vs. frecuencia
graf + geom_density()
```


## Escalas: Control de Asociación Estética

- `aes()` establece **qué** variable asignar, la escala **cómo** representarla

- Funciones de escala: `scale_<estética>_<tipo>`. Ejemplos,


<div style="font-size: 0.65em;">

| **Escala**        | **Tipos**    | **Ejemplos**              |
|-------------------|--------------|---------------------------|
|                   |              |                           |
| scale_color_      | identity     | scale_fill_continuous     |
| scale_fill_       | manual       | scale_color_discrete      |
| scale_size_       | continuous   | scale_color_manual        |
|                   | discrete     | scale_size_discrete       |
|                   |              |                           |
| scale_shape_      | discrete     | scale_shape_discrete      |
| scale_linetype_   | manual       | scale_shape_manual        |
|                   | identity     | scale_linetype_discrete   |
|                   |              |                           |
| scale_x_          | continuous   | scale_x_continuous        |
| scale_y_          | discrete     | scale_y_discrete          |
|                   | reverse      | scale_y_reverse           |
|                   | log10        | scale_x_log10             |
|                   | date         | scale_x_date              |
|                   | datetime     | scale_y_datetime          |

</div>

## Escalas (cont.)

- Algunos argumentos son habituales en casi todas las escalas (`name`, `breaks`, `labels`)

- Otros argumentos son específicos según el tipo de variables (continua, discreta) o la escala concreta

```{r escalas-ejemplos}
ggplot(macro, aes(y = pais, x = pib)) + 
  geom_point(aes(color = desempleo))  +
  scale_color_continuous(breaks = c(5, 10, 15),
                         labels = c("Bajo", "Medio", "Alto"), 
                         low = "green", high = "red")

ggplot(macro, aes(y = desempleo, x = pib/1000)) + 
  geom_point(aes(color = norte, size = deuda, shape = norte)) + 
  scale_y_continuous(breaks = seq(0, 20, 5), limits = c(-5, 25)) +
  scale_shape_discrete(labels = c("Norte", "Sur"), 
                       name = "Zona de Europa")

```

```{r escalas-ejemplos2}
#| echo: false
g2 + scale_color_gradient2(breaks = c(5, 10, 15),
                           labels = c("Bajo", "Medio", "Alto"), 
                           low = "blue", high = "red", mid = "gray60", 
                            midpoint = 10)
```

:::: {.notes}
- Argumentos Habituales
  - `limits`: mínimo y máximo
  - `breaks`: valores donde aparecen etiquetas  
  - `labels`: etiquetas en cada break
  - `name`: título de la escala
::::

- Nota: este ejemplo tiene elementos redundantes a efectos ilustrativos

:::: {.notes}
- Ej., dos estéticas para una variables
- `limits` que no concuerdan con `breaks`
::::

## Escala Logarítmica

- En muchos contextos, las variables tienen un **rango de valores amplio**
  
  - PIB, población (Lux 0.6M vs ALE 83M), clientes (pyme 500 vs Inditex 200M)
  
  
- Escala lineal vs logarítmica:

  - Lineal: misma distancia visual = mismo aumento absoluto → los valores pequeños quedan "aplastados" para mostrar los grandes

  - Logarítmica: misma distancia visual = mismo incremento relativo (%)


```{r escala-log}
ggplot(macro, aes(y = desempleo, x = poblacion)) + 
  scale_x_log10(breaks = seq(0,100,20)) + geom_point()
```



- Mejor que `x = log(pib)` porque los ejes se muestran en unidades originales

:::: {.notes}

- En escala lineal: misma distancia entre 20 y 40 que entre 40 y 60 -> incremento de 20 millones de personas en ambos casos

- En escala logarítmica: misma distancia entre  20 y 40 que entre 40 y 80 -> incremento del 100% en ambos casos


- qué es un logaritmo de euros o de personas

::::

- Usar logs **cambia la interpretación** de diferencias absolutas a porcentuales

  - Más relevante +10% <!--clientes--> o +500 clientes (mucho en pyme, nada en Inditex)

  - **NO** para "evitar" valores extremos o distribución asimétrica <!-- no normal -->

## Facetas (sub-gráficos)

- Los sub-gráficos por variables *categóricas* son una alternativa a `aes()` para añadir variables

- Facilitan comparaciones, evitando la saturación visual (ej., demasiadas líneas en un solo gráfico)

```{r facetas-problema}
graf_tiempo <- ggplot(ventas_tiempo, aes(x = fecha, y = ventas))
graf_tiempo + geom_line(aes(color = region))
```


- `facet_wrap()`: facetas por una variable (usando "fórmula" `~`)

```{r facet-wrap}
graf_tiempo + geom_line() + facet_wrap(~region, ncol = 2)
```

- `facet_grid()`: facetas en dos dimensiones

```{r facet-grid}
g3 <- ggplot(data = clientes) + geom_histogram(aes(x = gasto))
g3 + facet_grid(segmento ~ canal)  # Filas y columnas
g3 + facet_grid(segmento ~ .)      # Solo por filas 
g3 + facet_grid(. ~ canal)         # Solo por columnas
```

## Contexto con `labs()`

- Una **buena práctica** de legibilidad es dar título al gráfico, nombrar los ejes, incluir leyendas

  - Descripciones claras de variables y sus unidades

```{r etiquetas-completas}
ggplot(macro, aes(y = desempleo, x = pib/1000)) + 
  geom_point(aes(color = norte, size = deuda)) + 
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Relación entre PIB per cápita y tasa de desempleo",
    subtitle = "Países de la Unión Europea (2023)",
    caption = "Fuente: Eurostat",
    x = "PIB per cápita (miles de €)",
    y = "Tasa de desempleo (%)",
    color = "Norte",
    size = "Deuda pública (% PIB)") +
  scale_y_continuous(breaks = seq(0, 20, 5))
```


## Otros Elementos de Contexto

- **`annotate()`**: añade objetos geométricos NO asociados a variables:

```{r anotaciones}
ggplot(macro, aes(y = desempleo, x = pib/1000)) +
  geom_point(aes(color = norte)) + 
  geom_smooth(method = "lm", se = FALSE) +
  annotate("text", x = 60, y = 11, 
           label = "La doble división Norte-Sur") +
  annotate("text", x = 85, y = 6, label = "R ^ 2 == 0.45", 
           parse = TRUE)
```    

- **Líneas de Referencia**
```{r lineas-referencia}
ggplot(clientes, aes(x = canal, y = gasto/1000)) +
  geom_boxplot() +
  geom_hline(yintercept = 3.0, linetype = "dashed", 
             color = "red") +
  annotate("text", x = 3, y = 3.3, 
           label = "Objetivo mínimo", color = "red")
```

## Personalizar el aspecto general



:::: {.notes}

- Se puede personalizar el aspecto general de la visualización del gráfico de dos formas: color y temas

**COLOR**

- Cambiamos colores manualmente usando nombres o [códigos hexadecimales](https://html-color-codes.info/codigos-de-colores-hexadecimales/) 

```{r colores-manuales}
graf <- ggplot(ventas, aes(x = region, y = ventas, 
                           fill = region)) + 
          geom_boxplot()

graf + scale_fill_manual(values = c("red", "green", "blue", "orange"))
graf + scale_fill_manual(values = c("#1f77b4", "#ff7f0e", 
                                    "#2ca02c", "#d62728"))
```

- **Precaución**: los elementos decorativos deben ayudar a nuestro objetivo de transmitir *información*

::::

- Se pueden cambiar manualmente **colores** (p.e.,  `scale_fill_manual()`) o la forma (ej., `scale_shape_manual()`)

- PERO es preferible usar *paletas predefinidas* con criterios de diseño y visualización de *información*:

```{r paletas-predefinidas}
graf <- ggplot(ventas, aes(x = region, y = ventas, fill = region)) + 
          geom_boxplot()
library(RColorBrewer)
display.brewer.all()
graf + scale_fill_brewer(palette = "Set2")
```


```{r paletas-predefinidas2}
#| echo: false
graf + scale_fill_brewer(palette = "Dark2")
```

:::: {.notes}

- [`RColorBrewer`](http://www.colorbrewer2.org) <!--de Cynthia Brewer--> o 
[`viridis`](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html) <!--(replica `matplotlib` de Python)-->

- También se puede cambiar la [forma](https://ggplot2.tidyverse.org/reference/scale_shape.html) con `scale_shape_manual()` 
::::


. . .

:::: {.notes}

**TEMAS**

- Se puede añadir una capa para definir el tema, es decir, estilo general de todos los componentes del gráfico:

::::

- Se puede añadir una capa de **tema** (estilo general de todos los componentes)

```{r temas-predefinidos0}
#| echo: false
graf + theme_gray()       # predeterminado
graf + theme_linedraw()
graf + theme_light()
graf + theme_minimal()
graf + theme_dark()
graf + theme_classic()
```

:::: {.columns}

::: {.column}

```{r temas-predefinidos1}
graf + theme_gray()      
```
:::

::: {.column}

```{r temas-predefinidos2}
graf + theme_minimal()
```
:::

::::

- También existen **temas profesionales** predefinidos en bibliotecas
```{r temas-profesionales}
library(ggthemes)
graf + theme_economist() + scale_fill_economist()     
```


:::: {.notes}
- Nota: es posible, pero *no recomendable* personalizar elementos concretos del tema (o definir un tema nuevo propio) 

```{r personalizacion}
tema_empresa <- theme_minimal() + 
  theme(text = element_text(color = "darkblue", family = "Arial"))
graf + tema_empresa
```
::::

<!-- ## ------------------------------------------------------------------- -->
:::: {.notes}
**Mejores Prácticas**

- Principios de Diseño
  - **Claridad** sobre ornamentación
  - **Datos prominentes**, diseño sutil  
  - **Proporciones adecuadas** (ratio de aspecto)
  - **Colores accesibles** (daltonismo)

- Elementos Contextuales
  - **Títulos descriptivos** e informativos
  - **Etiquetas de ejes** con unidades
  - **Leyendas claras** y bien posicionadas
  - **Fuentes de datos** y notas metodológicas

- Errores Comunes a Evitar
  - Ejes que no empiezan en cero (cuando corresponde)
  - Demasiados colores o patrones
  - Texto ilegible por tamaño o contraste  
  - Gráficos 3D innecesarios
  - Sobrecarga de información

::::

<!-- ## ------------------------------------------------------------------- -->

## Ejemplos Aplicados

1. Relación Gasto Marketing - Ventas
```{r ejemplo-marketing}
ggplot(ventas, aes(x = marketing, y = ventas)) +
  geom_point(aes(color = region)) +
  geom_smooth(method = "lm", se = TRUE) +
  labs(title = "ROI del Gasto en Marketing por Región",
       x = "Inversión en Marketing (miles €)",
       y = "Ventas (miles €)",
       color = "Región") +
  theme_minimal()
```

2. Distribución de Satisfacción del Cliente
```{r ejemplo-satisfaccion}
ggplot(ventas, aes(x = satisfaccion)) +
  geom_bar(fill = "steelblue") +
  facet_wrap(~producto) +
  labs(title = "Distribución de Satisfacción del Cliente por Producto",
       x = "Puntuación de Satisfacción (1-5)",
       y = "Número de Clientes") +
  theme_light()
```

## Ejemplos Aplicados

:::: {.notes}
3. Comparación de Indicadores UE
```{r ejemplo-macro}
ggplot(macro, aes(x = pais, y = pib)) +
  geom_col(aes(fill = norte)) +
  labs(title = "PIB per cápita en países de la UE",
       x = "País",
       y = "PIB per cápita (miles €)",
       fill = "Norte") +
  theme_economist() +
  scale_fill_economist()
```

::::

3. Indicadores Macroeconómicos
```{r ejemplo-triangulo}
ggplot(macro, aes(x = desempleo, y = inflacion)) +
  geom_point(aes(size = deuda, color = norte)) +
  geom_text_repel(aes(label = pais), size = 3) +
  labs(title = "Relación Desempleo-Inflación por País",
       x = "Tasa de Desempleo (%)",
       y = "Tasa de Inflación (%)",
       size = "Deuda Pública (% PIB)",
       color = "Norte de Europa")
```

- **Buenas prácticas**: visualizar no es decorar datos, es comunicar *insights*

  - Una idea por gráfico
  
  - *Claridad* sobre ornamentación: cada elemento visual debe tener propósito
  
  - Títulos y leyendas *descriptivos* e informativos
  
  - Evitar demasiados colores o patrones y la sobrecarga de información
  
:::: {.notes}  
  
  - El *contexto económico* importa tanto como la técnica

::::



<!-- ## ------------------------------------------------------------------- -->
:::: {.notes}
**Mejores Prácticas**

- Principios de Diseño
  - **Claridad** sobre ornamentación
  - **Datos prominentes**, diseño sutil  
  - **Proporciones adecuadas** (ratio de aspecto)
  - **Colores accesibles** (daltonismo)

- Elementos Contextuales
  - **Títulos descriptivos** e informativos
  - **Etiquetas de ejes** con unidades
  - **Leyendas claras** y bien posicionadas
  - **Fuentes de datos** y notas metodológicas

- Errores Comunes a Evitar
  - Ejes que no empiezan en cero (cuando corresponde)
  - Demasiados colores o patrones
  - Texto ilegible por tamaño o contraste  
  - Gráficos 3D innecesarios
  - Sobrecarga de información

::::

<!-- ## ------------------------------------------------------------------- -->


## Comentarios Finales

- **Guardar gráficos**: en la pestaña de *Plots* > *Export* o con el comando
```{r guardar}
ggsave("analisis-ventas.pdf")
ggsave("dashboard-macro.png", width = 12, height = 8, dpi = 300)
```

. . .

- **Recursos de Ayuda**

  - *Help > Cheatsheets > Data Visualization with ggplot2* 

  - [Chuletas de R y RStudio](https://www.rstudio.com/resources/cheatsheets/)

  - [R Graph Gallery](https://r-graph-gallery.com/)

  - [ggplot2 book](https://ggplot2-book.org/)

- **Otras bibliotecas de gráficos** en R

  - `plotly`: gráficos interactivos para dashboards

  - `gganimate`: animaciones para evolución temporal

:::: {.notes}
- `patchwork`: combinación de gráficos para reportes
::::
