---
# subtitle: "Técnicas para 'Big Data' en Economía - Curso 2023/24 \n\n Universidad de Alicante"
# subtitle: "Análisis de Datos Multivariantes aplicado al Marketing - Curso 2023/24 \n\n Universidad de Alicante"
# subtitle: "Muestreo y Análisis de Datos - Universidad de Alicante"
# subtitle: "Econometría II - Curso 2023/24 \n\n Universidad de Alicante"
title    :  "Tema 03. Datos Relacionales. Ejercicio."
author:  
    - "Pedro Albarrán"
    - "Alberto Pérez"
# institute: "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
   
# institute: 
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
format:
#   beamer:
#     logo: figure/by-nc-sa2.png
#     titlegraphic: figure/by-nc-sa.png
#     theme: Boadilla # Copenhagen # CambridgeUS #
#     outertheme: miniframes
#     colortheme: crane
#     section-titles: false
#     fontsize: 10pt
# #    header-includes:
# #      - \setbeameroption{show notes}
# #      # - \setbeameroption{show notes on second screen}
  # revealjs:
  #   logo: figure/by-nc-sa2.png
  #   titlegraphic: figure/by-nc-sa.png
  #   theme:  
  #     - serif # simple # default # moon # beige # sky #
  #     - custom.scss
  #   smaller: true # false #  
  #   scrollable: true
  #   embed-resources: true
  #   slide-number: true
  #   show-slide-number: all
  #   transition: slide # concave # 
  #   background-transition: fade
  #   progress: true
  html: 
    embed-resources: true
execute:
  enabled: true      # (no) ejecutar code chunks
  eval: false        # por defecto, evalúa y muestra códido de code chunks
  echo: true
  warning: false    # pero no los mensajes ni warnings
  message: false
knitr:
  opts_chunk:
    results: hide     # ni muestra resultados ni figuras
    fig.show: hide
lang: es
strip-comments: true
toc: false
css: styles.css
---


```{r setup, include=FALSE}
#```{r setup, message=FALSE, warning=FALSE, include=FALSE} 
# include=F es suficiente para no incluir mensajes, etc.

# Opciones por defecto para los fragmentos de código
knitr::opts_chunk$set(eval = TRUE, echo = TRUE, 
                      warning = FALSE, message = FALSE,
                      results = "hide", fig.show="hide")
# se muestra y evalúa el código,
# no se muestran mensajes, ni avisos (warnings)
# no se muestran los resultados de código (tampoco gráficos)
#     en los códigos que considere necesarios los mostraré

# Elimino todo del Entorno (del documento)
rm(list = ls())       

# Cargo todas las bibliotecas necesarias
# (se podría hacer cuando cada una sea necesaria)
library(tidyverse)
# library(tidymodels)
# library(printr)
# library(skimr)
# library(dlookr)
# library(broom)
library(kableExtra)
# library(rpart.plot)
# library(vip)

#fijo el directorio de trabajo
#setwd("/home/albarran/Dropbox/MAD/00.TEC")
library(rmarkdown)
#render("filename.Rmd")     
#browseURL("filename.html")
```


# Entrega del ejercicio

<!--
Escribe un archivo .Rmd con el código y el texto (breve) para responder a las siguientes preguntas. La transformación de datos deberá ser una línea con comandos anidados.


Rellenad este [FORMULARIO](https://docs.google.com/forms/d/e/1FAIpQLScYLKXLOzQWcL5ACQuwlixcx18411t90JRFfzHK_AtQDcosPA/viewform) con vuestros datos y subid

- vuestro archivo de .Rmd
- el archivo .html resultado de compilarlo en RStudio.

IMPORTANTE: los nombres de los archivos DEBEN EMPEZAR con vuestro número de DNI (el resto es libre): ej.,

> 12345678_T05_ejerc.Rmd

> 12345678_T05_ejerc.html
-->

Este ejercicio se realizará en clase y NO cuenta para los alumnos de evaluación NO continua (aunque es recomendable como práctica).

<!--
Para responder a las preguntas, rellenad este [FORMULARIO](https://docs.google.com/forms/d/e/1FAIpQLSdy_dt8_7bV0qxZ37rzi8PTPQRKU6eANMlLdU89RjHmxsr3Nw/viewform) con vuestros datos usando vuestra cuenta institucional de Google Cloud (@gcloud.ua.es). El proceso será contestar a UNA pregunta solo y enviar (*Submit*). **Importante**: NO cerrar la pestaña después de enviar y que aparezca "Tú respuesta ha sido guardada correctamente", porque usaremos el enlace que aparece en "Edit your response" para volver al *mismo* formulario con vuestros datos ya rellenos (y la respuesta a preguntas anteriores) para responder a las siguientes preguntas.
-->


<!--
# Datos

```{r echo=FALSE, eval=FALSE}
library(tidyverse)
library(babynames)

rm(list=ls())

nombreF <- read_tsv("./0data/nombreF.csv", col_names = c("nombre","freq"), 
                    locale = locale(decimal_mark = ",", grouping_mark = "."), 
                    col_types = "cn",skip = 100) %>% 
            mutate(freq=floor(freq/sum(freq)*4100))

nombreH <- read_tsv("./0data/nombreH.csv", col_names = c("nombre","freq"), 
                    locale = locale(decimal_mark = ",", grouping_mark = "."), 
                    col_types = "cn",skip = 100) %>% 
            mutate(freq=floor(freq/sum(freq)*6100))

apellido <- read_tsv("./0data/apellido.csv", col_names = c("apellido","freqA"),
                     locale = locale(decimal_mark = ",", grouping_mark = "."), 
                     col_types = "cn") %>% 
  mutate(freqA=floor(freqA/sum(freqA)*6200))


nombreF_2 <- rep(nombreF$nombre, nombreF$freq)
nombreH_2 <- rep(nombreH$nombre, nombreH$freq)
apellido_2 <- rep(apellido$apellido, apellido$freqA)

datosH <- cbind(apellido_2, apellido$apellido, nombreH_2) %>% as_tibble() %>% distinct()
datosM <- cbind(apellido_2, apellido$apellido, nombreF_2) %>% as_tibble() %>% distinct()

numH <- datosH %>% nrow()
numM <- datosM %>% nrow()

datosH <- datosH %>% sample_n(numH) %>% distinct()
datosM <- datosM %>% sample_n(numM) %>% distinct()

datos <- datosH %>% rename(apellido1 = apellido_2, apellido2 = V2, nombre = nombreH_2) %>% mutate(genero = "Hombre")

datos <- datosM %>% rename(apellido1 = apellido_2, apellido2 = V2, nombre = nombreF_2) %>% mutate(genero = "Mujer") %>% bind_rows(datos)

rm(datosH, datosM, nombreF, nombreH, apellido_2, nombreF_2, nombreH_2, apellido)

num <- datos %>% nrow()

datos <- datos %>% sample_n(num) %>% mutate(ID = row_number(), genero = parse_factor(genero)) 

num <- datos %>% nrow()
datos %>% distinct() %>% nrow()

d0 <- babynames %>% count(name, wt =n, sort = TRUE) %>% 
        slice_head(n = num) %>% mutate(ID=row_number()) %>% 
        select(name, ID)

datos2 <-
babynames %>% right_join(d0, by = "name") %>% 
  inner_join(datos, by = "ID") %>% select(ID:genero, year, n) %>% 
  rename(ventas = n)

datos2 %>% mutate(anio = 2000+floor((year-1880)/12),
                                      mes  = (year-1880) -floor((year-1880)/12)*12+1) %>% 
  group_by(year, anio, mes) %>% summarize(n=n())

datos2 <-
  datos2 %>% mutate(anio = 2000+floor((year-1880)/12),
                   mes  = (year-1880) -floor((year-1880)/12)*12+1) %>% 
  select(-year)

datos2 %>% drop_na() %>% distinct(ID) %>% count()

write_csv2(datos2, "~/Dropbox/MAD/00.TEC/data/empleados.csv")

rm(list=ls())
```

Descargad [este archivo (comprimido)](https://github.com/albarran/BigDataEcon2021/raw/main/data/empleados.csv.zip) con datos en texto separados por punto y coma con la siguiente información de los empleados de una empresa: el identificador de empleado (`ID`), sus dos apellidos y su nombre, su género (hombre o mujer) y el valor de las `ventas` realizadas por dicho empleado en un periodo concreto, dado por año y mes.

```{r, echo=FALSE, eval=FALSE}
datos <- read_csv2("~/Dropbox/MAD/00.TEC/data/empleados.csv")
datos %>% drop_na() %>% distinct(ID) %>% count()
```

-->



```{r}
#| echo: false
#| eval: false
library(tidyverse)
library(rio)

empleados <- import("https://raw.githubusercontent.com/albarran/00datos/refs/heads/main/empleados.csv.zip")

ID <- empleados %>% distinct(ID)
reg <- LETTERS[1:7]
regiones <- tibble(claveRegion = LETTERS[1:7], 
                   nombreRegion = c("España - Madrid", "España - Barcelona", "España - Noroeste", "España - Levante", "España - Sur", "Europa", "Resto del Mundo"))

region <- sample(LETTERS[1:7], nrow(ID), replace = TRUE)

regionEmpleado <- tibble(ID = ID$ID, 
                         region = region) %>% 
                  anti_join(tibble(ID=sample(ID$ID, size = 204)))

export(list("regiones" = regiones, 
            "regionEmpleado" = regionEmpleado), "regionEmpleado.xlsx")
```


# Preguntas

<!--

TRES EJERCICIOS:
1. Trabajar con un tabla y luego unir con otra existente para traer información 
2. unión de filtrado con dos tablas existente
3. Trabajar con una tabla para crear otra (group_by + summarize) y usarla en una unión de filtrado

-->

```{r echo=FALSE, eval=TRUE}
library(nycflights13)
```

<!--
1. Utilizar los datos relacionales de la biblioteca `nycflights13`. ¿Cuál era el nombre completo del aeropuerto que era el destino más común desde NYC en 2013?

```{r echo=FALSE, eval=FALSE}
flights %>%
  group_by(dest) %>%
  summarize(N = n()) %>%
  arrange(desc(N)) %>%
  left_join(airports, by = c("dest" = "faa")) %>% 
  select(name)
```

-->

<!--
1.  Utilizar los datos relacionales de la biblioteca `nycflights13`. Mostrar cuál es el avión más utilizado y su fabricante y modelo.

```{r echo=FALSE, eval=FALSE}

flights %>%
  count(tailnum, sort = TRUE) %>% 
  full_join(planes, by = "tailnum") %>%    # ¿qué pasaría con left_, right_, inner_?
  select(tailnum, n, manufacturer, model)

#notar que avión elige head(1)...

# mejor contar y luego unir

flights %>%
  full_join(planes, by = "tailnum" ) %>%
  group_by(tailnum, manufacturer, model) %>%  
  summarize(n=n())   #count(sort = TRUE)

flights %>%
  full_join(planes, by = "tailnum" ) %>%
  count(tailnum, manufacturer, model, sort = TRUE)

#importante: manufacturer y model para que aparezcan luego
```
-->

En este ejercicio vamos a utilizar, por un lado, los datos de [este archivo (comprimido)](https://raw.githubusercontent.com/albarran/00datos/main/empleados.csv.zip) con datos en texto separados por punto y coma con la siguiente información de los empleados de una empresa: el identificador de empleado (`ID`), sus dos apellidos y su nombre, su género (hombre o mujer) y el valor de las `ventas` realizadas por dicho empleado en un periodo concreto, dado por año y mes. Por otro lado, disponemos de [este archivo Excel](https://raw.githubusercontent.com/albarran/00datos/main/regionEmpleado.xlsx) con dos hojas: `regiones`, con la clave de las regiones donde la empresa tiene sedes y el nombre completo de cada región, y `regionEmpleado`, con el identificador de cada individuo y la región a la que pertenece. 

```{r}
#| echo: false
#| eval: false
library(tidyverse)
library(rio)

empleados <- import("https://raw.githubusercontent.com/albarran/00datos/main/empleados.csv.zip")

regiones <- import("https://raw.githubusercontent.com/albarran/00datos/main/regionEmpleado.xlsx", sheet = "regiones")
regionEmpleado <- import("https://raw.githubusercontent.com/albarran/00datos/main/regionEmpleado.xlsx", sheet = "regionEmpleado")

```


<!-- * trabajador con más ventas para cada año y region -->

1. Mostrar en una tabla el nombre y apellidos del empleado de cada región con mayores ventas totales en el periodo de tiempo analizado. 

```{r}
#| echo: false
#| eval: false

empleados %>% 
  left_join(regionEmpleado, by = "ID") %>% 
  group_by(ID, nombre, apellido1, apellido2, region) %>% 
  summarize(ventas = sum(ventas)) %>%  ungroup() %>% 
  group_by(region) %>% 
  arrange(desc(ventas)) %>%
  slice_head(n = 1)

# más eficiente
empleados %>% 
  group_by(ID, nombre, apellido1, apellido2) %>% 
  summarize(ventas = sum(ventas)) %>%  ungroup() %>% 
  left_join(regionEmpleado, by = "ID") %>% 
  group_by(region) %>%
  arrange(desc(ventas)) %>%
  slice_head(n = 1)


```

<!--
* Mostrar en un gráfico la evolución de las ventas anuales de cada región.

```{r}
#| echo: false
#| eval: false
empleados %>% 
  left_join(regionEmpleado, by = "ID") %>% 
  group_by(anio, region) %>% 
  summarize(ventas = sum(ventas)) %>%  ungroup() %>%
  ggplot(aes(x = anio, y = ventas, color = region)) +
    geom_line()
```
-->

2. Mostrar el nombre completo de la región con más ventas cada año.

```{r}
#| echo: false
#| eval: false

empleados %>% 
  left_join(regionEmpleado, by = "ID") %>% 
  group_by(region, anio) %>% 
  summarize(ventas = sum(ventas)) %>%  ungroup() %>% 
  group_by(anio) %>% 
  arrange(desc(ventas)) %>%
  slice_head(n = 1) %>% 
  left_join(regiones, by = c("region" = "claveRegion")) 

```


<!--
* número de veces que algún trabajador ha vendido más de 100 al mes para cada año y region
```{r}
#| echo: false
#| eval: false
empleados %>% 
  group_by(anio, mes) %>% 
  mutate(mas100 = ventas > 100) %>%
  left_join(regionEmpleado, by = "ID") %>%
  group_by(region, anio) %>%
  summarize(mas100 = sum(mas100))
```
-->


3. Mostrar los nombres y apellidos de los empleado "misteriosos": es decir, aquellos que no sabemos a qué región pertenecen.


```{r}
#| echo: false
#| eval: false

empleados %>% 
  anti_join(regionEmpleado, by = "ID") %>% 
  distinct(ID, nombre, apellido1, apellido2)


empleados %>% 
  left_join(regionEmpleado, by = "ID") %>% 
  filter(is.na(region)) %>% 
  # select(ID, nombre, apellido1, apellido2)
  distinct(ID, nombre, apellido1, apellido2)


```

<!--
2. Utilizar los datos relacionales de la biblioteca `nycflights13`. Mostrar cuáles son los aeropuertos "misteriosos" (es decir, aeropuertos que aparecen como destinos en la tabla de vuelos pero que no aparecen en la tabla de aeropuertos).

```{r echo=FALSE, eval=FALSE}
anti_join(flights, airports, by = c("dest" = "faa")) %>% distinct(dest)

flights %>%
  left_join(airports, by = c("dest" = "faa")) %>%
  filter(is.na(name)) %>%
  distinct(dest)

# con anti_join, no se necesita añadir más columnas innecesarias (todas NA)
```
-->

<!--
What does `anti_join(flights, airports, by = c("dest" = "faa"))` tell you? 

What does anti_join(airports, flights, by = c("faa" = "dest"))` tell you?
-->


<!--

NO se realiza en 2022, 2023, 2024

3.  Utilizar los datos relacionales de la biblioteca `nycflights13`. Mostrar los vuelos cuyos aviones hayan realizado al menos 100 vuelos.

```{r echo=FALSE, eval=FALSE}
flights %>%                   #  filter(!is.na(tailnum)) %>%
  group_by(tailnum) %>%
  mutate(n = n()) %>%
  filter(n >= 100)

aviones_mas100 <- flights %>%  #  filter(!is.na(tailnum)) %>%
  group_by(tailnum) %>%
  count() %>%
  filter(n >= 100)
flights %>%
  semi_join(aviones_mas100, by = "tailnum")

flights %>%
  right_join(aviones_mas100, by = "tailnum")
```

-->