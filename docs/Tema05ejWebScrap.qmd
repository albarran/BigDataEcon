---
# subtitle: "Análisis de Datos Multivariantes aplicado al Marketing"
# subtitle: "Muestreo y Análisis de Datos"
subtitle: "Técnicas para 'Big Data' en Economía - Curso 2023/24 \n\n Universidad de Alicante"
title    :  "Tema 5. Ejercicio."
author:  
    - "Pedro Albarrán"
#    - "Teresa Molina"
# institute: "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
   
# institute: 
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
format:
#   beamer:
#     logo: figure/by-nc-sa2.png
#     titlegraphic: figure/by-nc-sa.png
#     theme: Boadilla # Copenhagen # CambridgeUS #
#     outertheme: miniframes
#     colortheme: crane
#     section-titles: false
#     fontsize: 10pt
# #    header-includes:
# #      - \setbeameroption{show notes}
# #      # - \setbeameroption{show notes on second screen}
  # revealjs:
  #   logo: figure/by-nc-sa2.png
  #   titlegraphic: figure/by-nc-sa.png
  #   theme:  
  #     - serif # simple # default # moon # beige # sky #
  #     - custom.scss
  #   smaller: true # false #  
  #   scrollable: true
  #   embed-resources: true
  #   slide-number: true
  #   show-slide-number: all
  #   transition: slide # concave # 
  #   background-transition: fade
  #   progress: true
  html: 
    embed-resources: true
execute:
  enabled: true      # (no) ejecutar code chunks
  eval: false        # por defecto, evalúa y muestra códido de code chunks
  echo: true
  warning: false    # pero no los mensajes ni warnings
  message: false
knitr:
  opts_chunk:
    results: hide     # ni muestra resultados ni figuras
    fig.show: hide
lang: es
strip-comments: true
toc: false
css: styles.css
---

```{r setup, include=FALSE}
#```{r setup, message=FALSE, warning=FALSE, include=FALSE} 
# include=F es suficiente para no incluir mensajes, etc.

# Opciones por defecto para los fragmentos de código
knitr::opts_chunk$set(eval = TRUE, echo = TRUE, 
                      warning = FALSE, message = FALSE,
                      results = "hide", fig.show="hide")
# se muestra y evalúa el código,
# no se muestran mensajes, ni avisos (warnings)
# no se muestran los resultados de código (tampoco gráficos)
#     en los códigos que considere necesarios los mostraré

# Elimino todo del Entorno (del documento)
rm(list = ls())       

# Cargo todas las bibliotecas necesarias
# (se podría hacer cuando cada una sea necesaria)
library(tidyverse)
# library(tidymodels)
# library(printr)
# library(skimr)
# library(dlookr)
# library(broom)
library(kableExtra)
# library(rpart.plot)
# library(vip)

#fijo el directorio de trabajo
#setwd("/home/albarran/Dropbox/MAD/00.TEC")
library(rmarkdown)
#render("filename.Rmd")     
#browseURL("filename.html")
```



## *Scraping* con `rvest`

Internet es un gran lugar para obtener datos. Podemos usar `rvest` para extraer (en inglés, *scrap* significa literalmente raspar o rascar una superficie) los datos en tablas HTML de la web, pero a menudo requerirá una limpieza extensa antes de que se puedan usar adecuadamente.

Considerar la siguiente lista de los fines de semana de apertura de taquillas más grandes:

(http://www.boxofficemojo.com/alltime/weekends/)

Usando `rvest` podemos traer esta tabla a R.

```{r,  echo=TRUE}
library(rvest)
url <- "http://www.boxofficemojo.com/alltime/weekends/"
```

Primero, necesitaremos leer el contenido de la página en HTML. La función `read_html()` proporcionada por `rvest` procesa el HTML:
```{r, echo=TRUE}
html_bom <- read_html(url)
class(html_bom)
html_bom
```

Desafortunadamente, esto no es muy legible. Lo que queremos es extraer los datos que están incrustados en las tablas HTML. Empecemos por tomar esas tablas que están dentro de los elementos del html llamados "table". Para ello podemos utilizar `html_nodes()`:
```{r, echo=TRUE}
tables <- html_bom %>%
  html_nodes("table")
tables
```

<!--
En este caso, había 6 elementos de tabla en esa página (la mayoría de ellos usados para crear los bordes). Sólo nos interesa el grande con todos los datos. Este es el quinto elemento de la lista (nota: averiguadpo por prueba y error).
```{r, eval=FALSE, echo=TRUE}
tables[[5]]
```
-->

En este caso, solo hay 1 elementos de tabla en esa página .
```{r, echo=TRUE}
tables[[1]]
```


La función `html_table()` extraerá los datos de esta tabla y los convertirá en un *data frame*. La opción `header = TRUE` indica a R que queremos usar la primera fila como nuestros nombres de variable.
```{r, echo=TRUE}
movies <- tables[[1]] %>%
  html_table(header = TRUE)
glimpse(movies)
```
En algunas ocasiones, existen más de una table en una página web. Si son pocas se puede determinar cuál nos interesa mediante prueba y error. En particular, en esta caso sabemos que los datos tienen 200 observaciones y 9 columnas; si lo que leemos tiene una dimensiones (obtenidas con `glimpse()` o `str()`) muy diferentes no debe ser la tabla que buscamos. En cualquier caso, con muchas tablas en la página web, necesitaremos nuevas herramientas de programación que veremos en breve.

<!--
En este caso sólo teníamos 6 tablas, así que no fue demasiado difícil usar prueba y error para averiguar cuál era la que queríamos. Pero también podríamos ser un poco más sistemáticos.

Usemos `lapply()` para extraer las 6 tablas, en un objeto de tipo lista con una longitud de 6:
```{r, eval=FALSE, echo=TRUE}
list_of_tables <- lapply(tables, html_table, fill = TRUE)
class(list_of_tables)
length(list_of_tables)
str(list_of_tables)
```

Puesto que `html_table()` asigna las tablas HTML a *data frames* en R, cada uno de los seis elementos de la lista list_of_tables es un *data frame*. Sin embargo, algunas de las tablas son más grandes que otras.

```{r, eval=FALSE, echo=TRUE}
lapply(list_of_tables, class)
lapply(list_of_tables, dim)
```

Es obvio desde la propia página web que la tabla que queremos tiene 9 variables y 214 filas. Sólo (el quinto elemento)[http://www.imdb.com/title/tt0119116/] de nuestra lista cumple con ese criterio.
-->

## Limpieza de datos

Si bien ahora tenemos los datos, podemos ver que son muy confusos:

  * los nombres de las variables contienen caracteres especiales, como asteriscos, paréntesis y espacios. Esto puede causar problemas, así que queremos cambiarlos.
  
  * la mayoría de las columnas se almacenan como vectores de caracteres, aunque contienen información cuantitativa. En particular, hay columnas para dólares, porcentajes y fechas que están en el formato equivocado.

Debido a este desajuste, si intentamos dibujar los datos, esto no funcionará como se esperaba.

```{r, echo=TRUE}
ggplot(
  data = movies, 
  aes(x = Date, y = Opening)
) + 
  geom_point(aes(size = `% of Total`))
```

<!--
Nota que cuando los nombres de la variables tienen caracteres "raros" se debe utilizar \` para marcar el inicio y el final del nombre. Esto incluye cualquier caracter no alfanumerico en cualquier posición del nombre de la variable y también los números al comienzo del nombre de una variable. Aquí esto sucede tanto por símbolo \% como por el espacio. Otros caracteres no alfanumericos son cualquier simbolo de puntuación, barras o letras como la ñ. 
-->

<!--
La función `parse_number()` del paquete `readr` es extremadamente útil para limpiar signos de dólar, comas y signos de porcentaje en los valores (Ojo, esto es diferente de los caracteres raros en el nombre mencionado antes). 
-->
Usaremos `parse_number()` junto con el verbo `mutate()` para renombrar las columnas al mismo tiempo.
```{r, echo=TRUE}
movies <- movies %>%
  mutate(opening = parse_number(Opening),
         percent_total = parse_number(`% of Total`)/100)
glimpse(movies)
```

Ahora, cuando dibujamos los datos cuantitativos, obtenemos algo que tiene más sentido.

```{r, echo=TRUE}
ggplot(data = movies, aes(x = Date, y = opening)) + 
  geom_point(aes(size = percent_total))
```

<!--
### Ejercicio

También crear una nueva variable llamada `num_theaters` que almacena el número de teatros como un entero, y otras dos más con el promedio y el total recaudado. Responde [aquí](https://docs.google.com/forms/d/e/1FAIpQLScJhX5F219jttLOAReSpiT5Mg7aO7-clheg2170DFsprTTp5A/viewform)
```{r, eval=FALSE, echo=FALSE}
movies <- movies %>%
  mutate(num_theaters = as.integer(parse_number(Theaters)))
movies <- movies %>%
  mutate(avg_gross = parse_number(Average),
         total_gross = parse_number(`Total Gross`))
```

Notad que es conveniente usar el tipo de datos enteros cuando estamos seguro de que la variable contiene ese tipo de valores porque se ahorra espacio de almacenamiento. Sin embargo, hay ciertos "límites" a los valores que se pueden representar como enteros: ver `help(integer)`.
-->

## Fechas con `lubridate`

Desafortunadamente, las fechas siguen siendo un problema. Echemos un vistazo a esas fechas:
```{r, eval=FALSE, echo=TRUE}
movies %>%
  select(Date) %>%
  glimpse()
```

Vemos que las fechas están en formato mes/día/año. Ya hemos visto anterioreme el paquete `lubridate` que proporciona funcionalidad para trabajar con fechas. Podemos utilizar la función `mdy()` para convertir el vector de caracteres en una clase de fecha.
```{r, echo=TRUE}
library(lubridate)
movies <- movies %>%
  mutate(release_date = mdy(Date))
glimpse(movies)
```

```{r, eval=FALSE, echo=FALSE}
ggplot(data = movies, aes(x = release_date, y = opening)) + 
  #queremos un gráfico de dispersión, y usaremos tanto el color como el tamaño para mostrar porcentaje total
  geom_point(aes(color = percent_total, size = percent_total)) +
  # truco para combinar color y tamaño en una sola leyenda 
  guides(color = guide_legend("Porcentaje Total"), 
         size = guide_legend("Porcentaje Total")) +
  # Formatear el eje y para mostrar la cantidad en $.
  scale_y_continuous(name = "Recaudación en el Día de Apertura", labels = scales::dollar) +
  # etiquetamos tambien el ejer de las x (podemos omitir el argumento `name`)
  scale_x_date("Fecha de estreno")
```

```{r, echo=TRUE}
ggplot(data = movies, aes(x = release_date, y = opening/1e6)) + 
  geom_point(aes(color = percent_total), size = 4) +
  scale_y_continuous(name = "Recaudación en el Día de Apertura (en millones de $)") +
  scale_x_date("Fecha de estreno")
```


## Vuestro Ejercicio

1. Repetir el ejercicio con la siguiente fuente de información: [http://www.the-numbers.com/movie/records/Biggest-Opening-Weekend-at-the-Box-Office](http://www.the-numbers.com/movie/records/Biggest-Opening-Weekend-at-the-Box-Office). Es decir, debéis extraer los datos relevantes de la web, limpiarlos y dejarlos preparados para trabajar,

<!--; también realizar un gráfico (a vuestra elección) similar al anterior.-->

<!--
    Debéis enviar un archivo de guión .R respondiendo a [este formulario](https://docs.google.com/forms/d/e/1FAIpQLSfl1vrJhI_fXjbkLv_OJxgJezCycNC_PF-tiUMfnuAepx_NGA/viewform). Como es habitual, el nombre del archivo debe empezar con vuestro número de DNI (el resto es libre): ej., 12345678_P04.R.
-->

<!--
    a. Extraer los datos relevantes de la web, limpiar/transformar los datos en brutos y dejarlos "cargados" para su posterior análisis. Este es un ejemplo "simple" de lo que se conoce como [ETL](https://es.wikipedia.org/wiki/Extract,_transform_and_load). 
    b. Realizar un gráfico (a vuestra elección) similar al anterior.\newline\newline
    
    Debéis enviar un archivo de guión .R respondiendo a [este formulario](https://docs.google.com/forms/d/e/1FAIpQLSfl1vrJhI_fXjbkLv_OJxgJezCycNC_PF-tiUMfnuAepx_NGA/viewform). Como es habitual, el nombre del archivo debe empezar con vuestro número de DNI (el resto es libre): ej., 12345678_P04.R.
-->
  
2. Partiendo de la tabla de datos obtenida en el apartado 1, realizar un BREVE análisis exploratorio de los datos. Crear dos variables adicionales: año y mes de estreno. Notad que el mes debe ser tratada como factor; el año puede ser numérica o categórica.

    Describid la variación de algunas variables (no necesariamente todas) y algunas pocas relaciones que consideréis relevantes.

<!--
    NOTA: no os compliquéis mucho: hay pocas variables (podéis querer generar alguna) y no hay mucha información para extraer "grandes" conclusiones. Centraros en practicar lo que se discutió en la práctica, describiendo la variación de (algunas) las variables y de las posibles relaciones entre ellas que consideréis más relevantes. 
-->  


## Entrega del ejercicio

Rellenad este [FORMULARIO](https://docs.google.com/forms/d/e/1FAIpQLScPBd-tHyUQ92nxYyn0-2eUQI_KZgg-0pgO248_56o4U5fN0g/viewform) con vuestros datos usando vuestra cuenta institucional de Google Cloud (@gcloud.ua.es) y subid 

  - vuestro archivo de .qmd

  - el resultado de compilarlo: bien un archivo .html autocontenido o bien un archivo .html y el directorio relacionado con el mismo nombre; en ambos casos, se recomienda comprimir todo para enviarlo.

IMPORTANTE: el nombre de los ficheros que subáis DEBE  seguir el  siguiente formato que incluye vuestro número de DNI: ej.,

 * Tema05ej_123456789.qmd
 
 * Tema05ej_123456789.zip
  
