---
# subtitle: "Técnicas para 'Big Data' en Economía - Curso 2023/24 \n\n Universidad de Alicante"
# subtitle: "Análisis de Datos Multivariantes aplicado al Marketing - Curso 2023/24 \n\n Universidad de Alicante"
# subtitle: "Muestreo y Análisis de Datos - Universidad de Alicante"
# subtitle: "Econometría II - Curso 2023/24 \n\n Universidad de Alicante"
title    :  "Tema 03 - Manipulación de datos relacionales" # con `dplyr` (una sola tabla)"
author:  
    - "Pedro Albarrán"
    - "Alberto Pérez"
institute: "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
   
# institute: 
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
format:
  # beamer:
  #   handout: false
  #   logo: figure/by-nc-sa2.png
  #   titlegraphic: figure/by-nc-sa.png
  #   theme:  Boadilla # Copenhagen # CambridgeUS #
  #   outertheme: miniframes
  #   colortheme: crane
  #   section-titles: false
  #   fontsize: 10pt
  #   header-includes: |
  #       \setbeamertemplate{footline}
  #       {
  #       \leavevmode%
  #       \hbox{%
  #       \begin{beamercolorbox}[wd=.30\paperwidth,ht=2.25ex,dp=1ex,center]{author in head/foot}%
  #       \usebeamerfont{author in head/foot}\insertshortauthor%
  #       \end{beamercolorbox}%
  #       \begin{beamercolorbox}[wd=.55\paperwidth,ht=2.25ex,dp=1ex,center]{title in head/foot}%
  #       \usebeamerfont{title in head/foot}\insertshorttitle%
  #       \end{beamercolorbox}%
  #       \begin{beamercolorbox}[wd=.15\paperwidth,ht=2.25ex,dp=1ex,center]{date in head/foot}%
  #       \usebeamerfont{date in head/foot}\insertframenumber{} / \inserttotalframenumber
  #       \end{beamercolorbox}}%
  #       }
  #      # - \setbeamertemplate{navigation symbols}{}
  #      # - \setbeamertemplate{caption}[numbered]
  #      # - \setbeamertemplate{headline}[page number]
  #      # - \setbeameroption{show notes}
  #      # - \setbeameroption{show notes on second screen}
  revealjs:
    logo: figure/by-nc-sa2.png
    titlegraphic: figure/by-nc-sa.png
    theme:  
        - beige # sky # serif # simple # default # moon #  
        - custom.scss
    smaller: true
    scrollable: true
    embed-resources: true
    slide-number: true
    show-slide-number: all
    transition: slide # concave # 
    background-transition: fade
    progress: true
    height: 800
    width: 1200
    # width: 3000
    # height: 2000
    # margin: 0.05
execute:
  enabled: true      # (no) ejecutar code chunks
  eval: false        # por defecto, evalúa y muestra códido de code chunks
  echo: true
  warning: false    # pero no los mensajes ni warnings
  message: false
knitr:
  opts_chunk:
    results: hide     # ni muestra resultados ni figuras
    fig.show: hide
lang: es
strip-comments: true
toc: true
toc-depth: 1
toc-expand: false
toc-title: "Contenidos"
css: styles.css
---


```{r setup, include=FALSE}
#```{r setup, message=FALSE, warning=FALSE, include=FALSE} 
# include=F es suficiente para no incluir mensajes, etc.

# Opciones por defecto para los fragmentos de código
knitr::opts_chunk$set(eval = TRUE, echo = TRUE, 
                      warning = FALSE, message = FALSE,
                      results = "hide", fig.show="hide")
# se muestra y evalúa el código,
# no se muestran mensajes, ni avisos (warnings)
# no se muestran los resultados de código (tampoco gráficos)
#     en los códigos que considere necesarios los mostraré

# Elimino todo del Entorno (del documento)
rm(list = ls())       

# Cargo todas las bibliotecas necesarias
# (se podría hacer cuando cada una sea necesaria)
library(tidyverse)
# library(tidymodels)
# library(printr)
# library(skimr)
# library(dlookr)
# library(broom)
library(kableExtra)
# library(rpart.plot)
# library(vip)

#fijo el directorio de trabajo
#setwd("/home/albarran/Dropbox/MAD/00.TEC")
library(rmarkdown)
#render("filename.Rmd")     
#browseURL("filename.html")
```


## Múltiples tablas de datos

* Analizar datos suele implicar múltiples tablas

    - diferentes orígenes<!-- de datos-->: ej., dptos. de empresa (personal, ventas, almacén)  
    
    - almacenamiento más eficiente: elementos "similares" dentro de una tabla y diferentes entre ellas

* Para poder *combinar* la información los datos deben ser **relacionales**: cada par de tablas están relacionadas <!--organizada--> mediante identificadores <!--únicos--> llamados **claves** 

<!-- en un sistema de gestión de base de datos relacional-->

* P.e., la biblioteca `nycflights13` contiene varias tablas: el nombre de la compañía está "codificado" en `flights` y se puede encontrar en `airlines`

<!--
* Algunas variables están "codificadas": p.e., el nombre completo de la compañía se encuentra en `airlines`
-->
```{r, echo=FALSE}
library(nycflights13)
```

```{r}
flights %>% select(dep_time,arr_time,carrier:dest) 
airlines
```

* Ambas tablas contienen un identificador común **clave** ("key"):  `carrier`


## Relaciones entre tablas
<center>
![](figure/relational-nycflights.png)
</center>
<!--

* `flights` se conecta con `airlines` a través de `carrier`.

* `flights` conecta con `planes` a través de `tailnum`.

* `flights` se conecta a los `airports` de dos maneras: `origin` y `dest`.

* `flights` se conecta a `weather` a través de `origin` (el lugar) y  `year`, `month`, `day` y `hour` (el tiempo).
-->

## Datos relacionales

* Tipos de claves:

    - **Primaria (o interna)**: identifican de forma única cada observación en una tabla. Puede ser *una sola variable* (en `planes`) o *múltiples* (en `weather`)

      - *Subrogada* = número de fila, si la tabla carece de identificación única 

    - **Secundaria (o externa)**: señala a la clave primaria de otra tabla <!--(`tailnumber` en `flights`). Una variable puede ser clave primaria y externa: `origin` en `weather` y `airports`-->

    
<!--
* Es conveniente verificar que las claves primarias realmente identifican de manera única cada observación. 

```{r}
planes %>% count(tailnum) %>% filter(n > 1)
#table(planes$tailnum)
```

* La clave externa asegura la integridad referencial. 
-->

<!--
* Tabla sin clave de identificación única: se crea con `mutate()` y `row_number()`. 

```{r}
flights %>% 
  count(year, month, day, flight) %>% 
  filter(n > 1)
```

-->

* Una clave primaria y una externa (asociada) en otra tabla forman una **relación**: 

    - de uno-a-muchos (ej., vuelos y aviones), de uno-a-uno, de muchos-a-muchos (ej., aerolíneas y aeropuertos), de muchos-a-uno


* Operaciones que se pueden realizar con dos tablas: uniones de transformación, uniones de filtro y operaciones de conjunto

<!--
## Operaciones con dos tablas

* **Uniones de transformación** ("Mutating joins"): añade nuevas variables a una tabla desde filas coincidentes en otra.  

* **Uniones de filtro** ("Filtering joins"): filtra las observaciones de una tabla basándose en si coinciden o no con una observación de la otra tabla. 

* **Operaciones de conjunto** ("Set operations"): combinan las observaciones en los conjuntos de datos como si fueran elementos de un conjunto.    

* Esta discusión asume que tenemos datos ordenados (*tidy*):
    + las filas son observaciones 
    + las columnas son variables

-->

<!--
* Ayuda: 

 r4ds
 
 USAR DATOS Y GRAFICOS DE <https://github.com/gadenbuie/tidyexplain>


-->

## Uniones de transformación

* Añaden **nuevas variables** a una tabla desde *filas coincidentes* en otra.  

* [Ejemplo:](https://raw.githubusercontent.com/albarran/00datos/main/DosTablas.xlsx)

<!-- como mutate = mutating joins -->

<center>
![](figure/DatosRelacionales.png)
</center>



* `cbind()` o `bind_columns()`: nuevas columnas para filas en el mismo orden

<!-- clave = fila Y ademán en el mismo orden -->

<!-- 
como en Excel por defecto

* en Excel, las uniones se hacen con VLOOKUP o HLOOKUP (BUSQUEDAH, BUSQUEDAV)
-->

* Dos argumentos obligatorios: las tablas que se unen

```{r}
# queremos añadir el nombre de las compañias en la tabla de vuelos
flights2 <- flights %>% 
              select(year:day, hour, origin, dest, carrier, tailnum)
airlines
```

```{r}
#| echo: false
flights2 <- flights %>% 
              select(year:day, hour, origin, dest, carrier, tailnum)
flights2 %>% left_join(airlines)   # añade el nombre de las compañías 
                                   # en la tabla de vuelos

```


```{r}
#| echo: false
flights2 <- flights %>% select(year:day, hour, origin, dest, carrier, tailnum)
left_join(flights2, airlines)     # añade el nombre de las compañías en la tabla de vuelos
flights2 %>% left_join(airlines)
```

```{r echo=FALSE, eval=FALSE}
flights2 %>% mutate(name = if_else(carrier == "9E", "Endeavor Air Inc.",
                           if_else(carrier == "AA", "American Airlines Inc.", 
                                   ...
                           if_else(carrier == "UA", "United Air Lines Inc.", ....))))
```

##  Argumento `by`: ¿Cómo se emparejan las tablas? 

* Con `by = c("varX", "varY")` indicamos las claves (variables que relacionan ambas tablas)

```{r}
flights2 %>% inner_join(airlines, by = c("carrier")) 
flights2 %>% inner_join(weather, 
                by = c("year", "month", "day", "hour", "origin"))
```

* Si se omite el argumento `by`, se usan todas las variables en común. <!-- de ambas tablas. --> Esto no siempre es deseable: ej., año no es lo mismo en `flights` y `planes`

* Columnas con el mismo nombre (ej., año) se desambigúan con un sufijo

```{r}
flights2 %>% left_join(planes, by = c("tailnum"))   
```

* `by = c("x1" = "y1", "x2" = "y2")` para emparejar la variable `x1` en la primera tabla con la variable `y1` en la segunda, y la variable `x2` con `y2`

```{r,  echo = TRUE, eval = FALSE}
flights2 %>% left_join(airports, 
                  by = c("dest" = "faa"))    # aeropuerto de destino
```


<!-- * Por defecto se usan todas las variables que aparezcan en ambas tablas  -->

<!--(unión natural). -->

```{r}
#| echo: false
flights2 %>% left_join(weather)    # coinciden en año, mes, día, hora y origen        
```

<!-- * No siempre deseable o posible: ej., año no es lo mismo en `flights` y `planes` -->

<!--
* PERO el mismo nombre puedecon significado diferente (ej., año en `flights` y `planes`)
-->

```{r echo=FALSE}
flights2 %>% left_join(planes)
flights2 %>% left_join(planes, by = c("tailnum"))
```


<!-- * `by = c("varX", "varY")`: para usar sólo algunas variables comunes -->

```{r}
#| echo: false
flights2 %>% left_join(planes, by = c("tailnum"))   # también: by = "tailnum"  
flights2 %>% left_join(weather, by = c("year", "month", "day", "hour", "origin"))
```

<!-- * Las columnas con el mismo nombre (ej., año) se desambigúan <!--en la salida--> <!--con un sufijo -->

<!-- * `by = c("x1" = "y1", "x2" = "y2")` para emparejar la variable `x1` en la primera tabla con la variable `y1` en la segunda, y la variable `x2` con `y2` -->

<!--Las variables usadas para la unión también se utilizarán en la tabla de salida.-->

<!--    + P.e., el vuelo tiene un aeropuerto de origen y destino, ¿a cuál lo unimos? -->

```{r,  echo = FALSE, eval = FALSE}
flights2 %>% left_join(airports, by = c("dest" = "faa"))    # aeropuerto de destino
```

```{r,  echo = FALSE, eval = FALSE}
flights2 %>% left_join(airports, by = c("origin" = "faa"))  # aeropuerto de origen
```

<!--

by = c("x1" = "x1", "x2" = "x2") es la forma general

se puede simplificar en algunos caso, by = "x1", by = c("x1", "x2") PERO

by = "x1" = "z1"    # NO funciona aunque solo un elemento en vector
-->


## Unión interna


```{r}
df1 <- tibble(clave = c(1:3), val_x = c("x1", "x2", "x3"))
df2 <- tibble(clave = c(1:2, 4), val_y = c("y1","y2","y4"))
```

* `inner_join(x, y)` sólo incluye observaciones que coincidan en `x` y `y`.
```{r}
df1 %>% inner_join(df2, by = c("clave"))
```



:::: {style="display: grid; grid-template-columns: 1fr 1fr; grid-column-gap: 10px; "}

::: {}

<center>
![](figure/join-inner.png){width=102%}
</center>
:::

::: {}

<center>
![](figure/inner-join.gif.zip)

</center>
:::

::::



<!--
* Uniendo dos series temporales con periodos diferentes: [PIB](https://fred.stlouisfed.org/series/GDPC1) y [consumo](https://fred.stlouisfed.org/series/MEHOINUSA672N)
-->

## Uniones externas

:::: {style="display: grid; grid-template-columns: 1fr 1fr; grid-column-gap: 10px; "}

::: {}
* Cuando una fila no coincide en una unión externa, las nuevas variables se rellenan como **valores ausentes** <!--con `NA`.--> 

* `left_join(df1, df2)`: mantiene todas las observaciones en `x`, coincidan o no con la de `y` 
  + (no se pierden observaciones de la tabla primaria) 
* `right_join(df1, df2)`:  mantiene todas las observaciones en `y`
* `full_join(df1, df2)`: incluye todas las observaciones de `x` e `y`


:::

::: {}

<center>

![](figure/join-outer.png){width=75%}

</center>
:::

::::


<!--

## Uniones externas (cont.)

:::: {style="display: flex;"}

::: {}

```{r}
df1 %>% left_join(df2)


```

<center>
![](figure/left-join.gif){width=80%}
</center>


:::

::: {}
$\hspace{0.5cm}$
:::

::: {}

```{r}
df1 %>% right_join(df2)    
```
<center>
![](figure/right-join.gif){width=80%}
</center>

:::

::: {}
$\hspace{0.5cm}$
:::

::: {}

```{r}
df1 %>% full_join(df2)   
```

<center>
![](figure/full-join.gif){width=80%}
</center>

:::
::::

* Notar que `df1 %>% right_join(df2)` es igual que `df2 %>% left_join(df1)`, pero con diferente orden columnas

-->


<!--
## Uniones de transformación como conjuntos

<center>
![](figure/join-venn.png){width=95%}
</center>

* PERO un diagrama de Venn no puede mostrar lo que sucede cuando las claves no identifican una observación de manera única.
-->

## Claves duplicadas


* Si una coincidencia no es única, se generan todas las combinaciones posibles (producto cartesiano) de las observaciones coincidentes


:::: {style="display: grid; grid-template-columns: 1fr 1fr; grid-column-gap: 10px; "}

::: {}
* En **una tabla**: añade información <!--adicional--> en una relación de uno a muchos.

<center>
![](figure/join-one-to-many.png){width=95%}
</center>
```{r echo=FALSE}
df1dup <- tibble(clave = c(1, 2, 2, 1), val_x = c("x1", "x2", "x3", "x4"))
df2dup <- tibble(clave = c(1, 2), val_y = c("y1", "y2"))
df1dup %>% left_join(df2dup)
```

:::

::: {}

* En **ambas tablas**: igualmente, <!--se obtienen--> todas las combinaciones posibles
<center>
![](figure/join-many-to-many.png){width=85%}
</center>
  + posible error: NO hay clave primaria única
  
  <!--: las claves no identifican únicamente una observación en ninguna de las dos tablas -->

```{r echo=FALSE}
df1dup2 <- tibble(clave = c(1, 2, 2, 3), val_x = c("x1", "x2", "x3", "x4"))
df2dup2 <- tibble(clave = c(1, 2, 2, 3), val_y = c("y1", "y2", "y3", "y4"))
df1dup2 %>% left_join(df2dup2)
```


:::
::::



<!--
## Observación

La función `base::merge()`  puede realizar los cuatro tipos de unión de transformación (usando las opciones `all.x = ` y `all.y = `, ver ayuda). Las ventajas de los verbos específicos de `dplyr` es que expresan más claramente la intención del código: la diferencia entre las uniones es realmente importante pero está oculta en los argumentos de `merge()`. Las uniones de dplyr son considerablemente más rápidas y no alteran el orden de las filas.


melt et al. <http://had.co.nz/reshape/>

-->


## Uniones de filtro

<!-- * Las uniones de filtro pero **afectan a las observaciones**, no a las variables -->

* Filtra las **observaciones** de la tabla de la izquierda basándose en si coinciden o no con una observación de la otra tabla

* Se tiene un subconjunto de las filas de la tabla de la izquierda

:::: {style="display: grid; grid-template-columns: 1fr 1fr; grid-column-gap: 20px; "}

::: {}

* `semi_join(x, y)` mantiene <!--todas--> las observaciones en `x` que están <!--coinciden--> en `y`

![](figure/join-semi.png){width=95%}

```{r}
df1 %>% semi_join(df2, 
          by = c("clave"))
```

:::

::: {}

* `anti_join(x, y)` elimina <!--todas--> las observaciones en `x` que están <!--coinciden--> en `y`

![](figure/join-anti.png){width=95%}

```{r}
df1 %>% anti_join(df2, 
          by = c("clave"))
```
::: 

::::

## Uniones de filtro (cont.)


* **Claves duplicadas**: en uniones de filtro sólo importa la existencia de una coincidencia, NO qué observación coincida $\Rightarrow$ NUNCA duplica filas

<center>
![](figure/join-semi-many.png){width=35%}
</center>

```{r echo=FALSE}
df1dup2 %>% semi_join(df2dup2)
```

* Las uniones de filtro son útiles  para diagnosticar desajustes de uniones (qué observaciones serán emparejadas)

<!-- ## Aplicaciones de `anti_join()` y `semi_join()` -->


<!-- * Son útiles para diagnosticar desajustes de uniones (qué observaciones serán emparejadas), porque solo eliminan y nunca duplican observaciones -->

<!--
Importante antes de hacer uniones con tablas MUY grandes
--> 

```{r}
flights %>% anti_join(planes, by = "tailnum") %>%   # vuelos sin información del avión
              count(tailnum, sort = TRUE)

```


```{r echo=FALSE}
flights %>% count(tailnum, sort = TRUE)
```


<!--
```{r}
df1dup3 <- tibble(clave = c(1, 1, 3, 4), val_x = c("x1", "x2", "x3", "x4"))
df2dup3 <- tibble(clave = c(1, 1, 2), val_y = c("y1", "y2", "y1"))

# Cuatro filas para empezar:
df1dup3 %>% nrow()
# Y tenemos cuatro filas después de la unión
df1dup3 %>% inner_join(df2dup3, by = "clave") %>% nrow()
df1dup3 %>% inner_join(df2dup3, by = "clave")
# Pero sólo dos filas en realidad coinciden
df1dup3 %>% semi_join(df2dup3, by = "clave") %>% nrow()
df1dup3 %>% semi_join(df2dup3, by = "clave")
```
-->


* <!--También algunas uniones de filtro son--> Pueden ser equivalentes a usar `filter()`, con tablas previamente resumidas, pero permiten filtrados complejos fácilmente

<!-- 
Unión, PERO NO con tabla ya existente

Creamos una tabla para nuestro objetivo de unión de filtrado 
-->

```{r}
#| echo: false
top_dest <- flights %>% count(dest, sort = TRUE) %>% head(10)   # destinos populares
flights %>% filter(dest %in% top_dest$dest)
flights %>% semi_join(top_dest)
```

```{r echo=FALSE}
flights %>% count(dest, sort = TRUE) %>% head(10) 
flights %>% group_by(dest) %>% summarize(n=n()) %>% arrange(desc(n)) %>% head(10)
```

```{r echo=FALSE, eval=FALSE}
flights %>% count(dest)
table(flights$dest)

flights %>% count(dest, sort = TRUE)

flights %>% filter(dest =="ORD" | dest = "ATL" | ...) 

top_dest$dest
flights %>% filter(dest %in% top_dest$dest) %>% summarize(media=mean(arr_delay))
flights %>% semi_join(top_dest)     
```

<!--
* Pero permiten filtrados complejos fácilmente <!--: ej., los diez días con más vuelos <!-- o con los atrasos promedio más atos--> <!--necesita un filtro con varias variables (`year`, `month`, `day`)-->

```{r echo=FALSE}
top_dias <- flights %>% count(year, month, day, sort = TRUE) %>% head(3)
flights %>% semi_join(top_dias)
```

```{r echo=FALSE}
flights %>% filter(day %in% top_dias$day, month %in% top_dias$month) %>% distinct(day, month)
flights %>% semi_join(top_dias) %>% distinct(day, month)
```


## Operaciones de conjunto

<!--
* Combinan las observaciones en los conjuntos de datos como si fueran elementos de un conjunto.   
-->

* Trabajan con filas completas, comparando valores de cada variable.

* Esperan que `x` e `y` tengan las **mismas variables**, y tratan las observaciones (filas) como elementos de un conjunto.

* Útil cuando se quiere dividir un filtro complejo en piezas más simples.

<!--
* `intersect(x, y)`: devuelve solo las observaciones tanto en `x` como en  `y`  
* `union(x, y)`: devuelve las observaciones únicas en ambas tablas `x` e `y`  
* `union_all(x, y)`: devuelve todas las filas de `x` e `y`, manteniendo duplicados  
* `setdiff(x, y)`: devuelve las observaciones en `x`, pero no en `y`.  
-->

```{r}
df1 <- tibble(x = 1:2, y = c(1, 1))
df2 <- tibble(x = c(1,1), y = 1:2)

intersect(df1, df2)     # solo filas tanto en df1 como en df2
union(df1, df2)         # filas únicas en ambas tablas df1 y df2` 
union_all(df1, df2)     # todas las filas de df1 y df2, manteniendo duplicados 
setdiff(df1, df2)       # filas en df1, pero no en df2
setdiff(df2, df1)   
```


```{r, echo = FALSE, eval = FALSE}
intersect(df1, df2)   # inner_join(df1,df2)
union(df1, df2)       # full_join(df1,df2)   # Notad que tenemos 3 filas, no 4
setdiff(df1, df2)     # anti_join(df1,df2)
setdiff(df2, df1)     # anti_join(df2, df1)
```


<!--
## Equivalencia con bases de datos SQL

```{r}
#| echo: false
#| eval: false
#| results: asis
library(kableExtra)
#library(knitr)
tabla <- tribble(
     ~dplyr           ,     ~SQL                                                               ,
  "inner_join()"      ,	"SELECT * FROM x JOIN y ON x.a = y.a"                                  ,
  "left_join()"       ,	"SELECT * FROM x LEFT JOIN y ON x.a = y.a"                             ,
  "right_join()"      ,	"SELECT * FROM x RIGHT JOIN y ON x.a = y.a"                            ,
  "full_join()"       ,	"SELECT * FROM x FULL JOIN y ON x.a = y.a"                             ,
  "semi_join()"       ,	"SELECT * FROM x WHERE EXISTS (SELECT 1 FROM y WHERE x.a = y.a)"       ,
  "anti_join()"       ,	"SELECT * FROM x WHERE NOT EXISTS (SELECT 1 FROM y WHERE x.a = y.a)"   ,
  "intersect(x, y)"   ,	"SELECT * FROM x INTERSECT SELECT * FROM y"                            ,
  "union(x, y)"       ,	"SELECT * FROM x UNION SELECT * FROM y"                                ,
  "setdiff(x, y)"     , "SELECT * FROM x EXCEPT SELECT * FROM y"                              
)
tabla %>%
  kbl()  %>%
  kable_paper("hover", full_width = F, font_size = 22)
# tabla
```



* SQL soporta más tipos de unión y puede trabajar con más de dos tablas.
-->

<!--

Como sugiere esta sintaxis,  más tipos de unión porque se pueden conectar las tablas usando restricciones diferentes a la igualdad (algunas veces llamadas no-equijoins).

`x` and `y` no tienen que ser tablas en la misma base de datos. Si especifica `copy = TRUE`, `dplyr` copiará la tabla `y` en el mismo lugar que `x`. 


Revisar las reglas de coerción. P. e., los factores se conservan sólo si los niveles coinciden exactamente; si no, se "coaccionan" (se fuerza su conversión) a tipo de carácter.

-->
