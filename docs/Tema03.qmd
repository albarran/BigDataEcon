---
# subtitle: "Análisis de Datos Multivariantes aplicado al Marketing"
# subtitle: "Muestreo y Análisis de Datos"
subtitle: "Técnicas para 'Big Data' en Economía - Curso 2023/24 \n\n Universidad de Alicante"
title    :  "Tema 03 - Datos ordenados con `tidyr`"
author:  
    - "Pedro Albarrán"
#    - "Teresa Molina"
institute: "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
   
# institute: 
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
#     - "Dpto. de Fundamentos del Análisis Económico. Universidad de Alicante"
format:
#   beamer:
#     logo: figure/by-nc-sa2.png
#     titlegraphic: figure/by-nc-sa.png
#     theme: Boadilla # Copenhagen # CambridgeUS #
#     outertheme: miniframes
#     colortheme: crane
#     section-titles: false
#     fontsize: 10pt
# #    header-includes:
# #      - \setbeameroption{show notes}
# #      # - \setbeameroption{show notes on second screen}
  revealjs:
    logo: figure/by-nc-sa2.png
    titlegraphic: figure/by-nc-sa.png
    theme:  
      - serif # simple # default # moon # beige # sky #
      - custom.scss
    smaller: true # false #  
    scrollable: true
    embed-resources: true
    slide-number: true
    show-slide-number: all
    transition: slide # concave # 
    background-transition: fade
    progress: true
    fontsize: 24pt
execute:
  enabled: true      # (no) ejecutar code chunks
  eval: false        # por defecto, evalúa y muestra códido de code chunks
  echo: true
  warning: false    # pero no los mensajes ni warnings
  message: false
knitr:
  opts_chunk:
    results: hide     # ni muestra resultados ni figuras
    fig.show: hide
lang: es
strip-comments: true
toc: false
css: styles.css
---

```{r setup, include=FALSE}
#```{r setup, message=FALSE, warning=FALSE, include=FALSE} 
# include=F es suficiente para no incluir mensajes, etc.

# Opciones por defecto para los fragmentos de código
knitr::opts_chunk$set(eval = TRUE, echo = TRUE, 
                      warning = FALSE, message = FALSE,
                      results = "hide", fig.show="hide")
# se muestra y evalúa el código,
# no se muestran mensajes, ni avisos (warnings)
# no se muestran los resultados de código (tampoco gráficos)
#     en los códigos que considere necesarios los mostraré

# Elimino todo del Entorno (del documento)
rm(list = ls())       

# Cargo todas las bibliotecas necesarias
# (se podría hacer cuando cada una sea necesaria)
library(tidyverse)
# library(tidymodels)
# library(printr)
# library(skimr)
# library(dlookr)
# library(broom)
library(kableExtra)
# library(rpart.plot)
# library(vip)

#fijo el directorio de trabajo
#setwd("/home/albarran/Dropbox/MAD/00.TEC")
library(rmarkdown)
#render("filename.Rmd")     
#browseURL("filename.html")
```


## ¿Qué son datos ordenados ('tidy data')?

* Los conjuntos rectangulares de datos son tablas con datos ordenados:


1.- Cada columna es una **variable**: mide el mismo *atributo* <!--(cuantitativo o cualitativo)o característica-->  entre unidades
  
2.- Cada fila es una **observación** (caso): <!--valores de la misma *unidad* a través de atributos--> misma *unidad* a través de atributos

3.- Cada celda es un **valor**

<center>
![](figure/tidy-1.png){width=70%}
</center>

* Tendremos información similar y no redundante en una misma tabla 

* Y se completa la información con uniones a tablas adicionales (ej., para variables codificadas)


## Datos no ordenados

:::: {style="display: grid; grid-template-columns: 2fr 1fr; grid-column-gap: 10px; "}

::: {}


<center>
![](figure/tablaNOordenados.png){width=100%}
</center>

::: 

::: {}
* Otras estructuras pueden tener sentido para *mostrar información* (o por convenciones)<!--para almacenar información -->

* Un [ejemplo](https://datos.gob.es/es/catalogo/ea0010587-hombres-segun-si-tienen-hijos-o-no-situacion-sentimental-y-edad-identificador-api-t20-p317-a2018-def-p02-e01-l0-06001-px) del portal de datos abiertos del Gobierno de España

* La visualización es atractiva, PERO sobran filas para **analizar** los datos

::: 
::::



## Cuatro representaciones de los mismos datos

```{r}
library(tidyverse)
table1     # datos ordenados
table2     # no tiene un valor por celda
```

<!--
```{r, echo=FALSE, figures-side, fig.show="hold", out.width="30%", fig.cap="table1"}
knitr::include_graphics("figure/tidyvsmessy01_n.png")

knitr::include_graphics("figure/tidyvsmessy02_n.png")
```
-->

:::: {style="display: flex;"}

::: {}


<!--* `table1`-->

<center>
![](figure/tidyvsmessy01_n.png){width=95%}
</center>

:::

::: {}

<!--* `table2` -->

<center>
![](figure/tidyvsmessy02_n.png){width=85%}
</center>

:::

::::

## Cuatro representaciones (cont.)

```{r}
table3     # mezcla más de una variable en una columna
table4a 
table4b
```

* `table4a` y `table4b` ofrecen información útil para presentación, pero 
    - variables tanto en filas como columnas
    - las cabeceras de columna son valores, no nombres de variables.

<center>
![](figure/tidyvsmessy04a_n.png){width=60%}
</center>


## Ventajas de datos ordenados

<!--
1. Con una estructura de datos consistente, se pueden aprender fácilmente unas herramientas que funcionan de forma uniforme con ella

    + `tidyverse` (incluyendo `ggplot2`) están diseñados para trabajar con datos ordenados
-->  

* La mayoría de las funciones R (y otros lenguajes) trabajan con vectores: los datos ordenados son una forma natural
 (variable = vector columna)
 
<!--* Para acceder al vector valores de `cases`-->
```{r}
table1$cases                   # table1 %>% select(cases)
table2$count[c(1,3,5,7,9,11)]  # table2 %>% filter(type == "cases") %>%
                               #            select(count)
c(table4a$`1999`, table4a$`2000`)
# crear variables es fácil
table1 %>% mutate(rate = cases / population * 10000)  
```

* `tidyverse` es eficiente con datos ordenados: ej., gráfico temporal

```{r}
ggplot(table1, aes(x = year, y = cases)) +  
  geom_line(aes(colour = country))
```

```{r, echo=FALSE, eval=FALSE}
# en Excel (ver data/table4c.csv)
table4c <- tibble(year = 1999:2000, AF = c(745, 2666), 
                  BR = c(37737, 80488), CH = c(212258, 213766))

ggplot(table4c, aes(x = year)) + 
  geom_line(aes(y=AF)) + geom_line(aes(y=BR)) +geom_line(aes(y=CH)) 

# Pero con ggplot podemos representar hasta cuatro variables
ggplot(table1, aes(x = year, y = cases)) +  
  geom_line(aes(colour = country)) +
  geom_point(aes(size = population))
```

```{r echo=FALSE}
table4a
```


## Mismos datos, dos formatos: ancho o largo

:::: {style="display: flex;"}

::: {}

* La utilidad de almacenar los datos en un rectángulo ancho ("wide") o en uno largo ("long"")  depende de qué queramos hacer

* El cambio de forma <!--("reshaping") de una tabla-->  entre formatos es una tarea habitual del analista de datos. 


* Cambiar entre representación larga y ancha se conoce como **pivotar (o girar)**

<!--
DISTINTO de trasponer filas y columnas en Excel

Existe una función para pivotar en Excel -->

<!--
* Los datos en bruto suelen estar en formato largo: facilita la recogida de información, no el análisis
-->

:::

::: {}

![](./figure/original-dfs-tidy.png){width=100%}
:::

::::

```{r}
table4a        # formato ancho
table1         # formato largo
```


<!--
## Cambiar la forma de una tabla (pivotar / girar)

* Las celdas en un formato se reordenan en el otro

<center>
![](./figure/tidyr-longer-wider.gif){width=45%}
</center>

* Los metadatos que no se reordenan son extendidos/reducidos para no perder información. 
-->




<!-- 
https://tidyr.tidyverse.org/ 

* reshape en R base:  https://jozef.io/r001-reshape/

https://www.r-bloggers.com/2019/07/how-to-reshape-a-dataframe-from-wide-to-long-or-long-to-wide-format/


<https://www.r-bloggers.com/how-to-reshape-data-in-r-tidyr-vs-reshape2/>

<https://www.r-bloggers.com/pivoting-tidily/>

-->

<!--
## Verbos principales en `tidyr`

* `pivot_longer()`: cambia la forma de "anchos" a "largos" (+filas/-cols)

    + **ordena** datos originales para facilitar el análisis.

* `pivot_wider()` cambia la forma de "largos" a "anchos" (+cols/-filas)

    + útil para crear tablas de resumen o un formato para otras herramientas.

<center>
![](figure/long-wide.png){width=75%}
</center>

<!--
 La longitud es un término relativo, y sólo se puede decir (por ejemplo) que el conjunto de datos A es más largo que el conjunto de datos B.
-->


## `pivot_longer()`: de ancho a largo

* Pivotar las variables no ordenadas en dos nuevas columnas (deben crearse) 

:::: {style="display: flex;"}

::: {}

```{r, eval=FALSE, echo=TRUE}
pivot_longer(table4a, 
             cols=2:3, 
             names_to = "year", 
             values_to = "cases") 
```

<center>
![](figure/longer.png){width=100%}
</center>

:::

::: {}

  1. *data frame* a cambiar de forma
  
  2. nombres o índices <!--numérico--> de las columnas que representan valores, no variables 
  3. los nombres <!--(encabezamientos)--> de esas antiguas variables van como valores a nueva variable
  4. los valores de las antiguas celdas van a otra nueva variable

:::

::::

<!--  
* Para ordenar `table4a`, necesitamos pivotar las variables que no están ordenadas (año y `cases`) en un par de nuevas columnas
-->

* Para recuperar `table1`, se debería pivotar también `table4b` y unir ambas

```{r, echo=F, eval=F}
tidy4a <- table4a %>% pivot_longer(2:3, names_to = "year", values_to = "cases")
tidy4b <- table4b %>% pivot_longer(2:3, names_to = "year", values_to = "population")
left_join(tidy4a, tidy4b)
```


## `pivot_longer()`: de ancho a largo (cont.)

* Recordatorio: formas equivalentes de hacer lo mismo
```{r, eval=FALSE, echo=TRUE}
pivot_longer(table4a, 2:3, names_to = "year", values_to = "cases")       
table4a %>% pivot_longer(c(`1999`, `2000`), values_to = "cases", names_to = "year")
table4a %>% pivot_longer(names_to = "year", values_to = "cases", -country)
table4a %>% pivot_longer(names_to = "year", values_to = "cases", `1999`:`2000`)
```


* Notar que los nombres de columna son caracteres y cuando son números van entre \` (evita confusión con índice de posición)

```{r echo=FALSE, eval=FALSE}
table4a %>% pivot_longer(c(1999, 2000), values_to = "cases", names_to = "year")
table1 %>% mutate(`tasa por 1000 mil habitantes` = cases/population*1000,
                  tasa =cases/population*1000)
```

* Deberíamos cambiar el tipo de las nuevas variables 

<!--  - y si fueran `Year1999`, `Year2000`, habría que separar texto y número -->


```{r  eval=FALSE}
pivot_longer(table4a, 2:3, names_to = "year", values_to = "cases") %>%
  mutate(year= parse_number(year))
```

```{r echo=FALSE}
pivot_longer(table4a, 2:3, names_to = "year", values_to = "cases") %>% mutate(year= as.integer(year))
```




## `pivot_wider()`: de largo a ancho 


:::: {style="display: flex;"}

::: {}
```{r, eval=FALSE, echo=TRUE}
table2 %>%
    pivot_wider(names_from = type,  
                values_from = count)
```

<center>
![](figure/wider1.png){width=95%}
</center>


::: 

::: {}

1. el *data frame* a cambiar de forma
2. nombre de la variable de cuyos valores vienen los nuevos nombres de columnas<!--(variables)-->
3. nombre de la variable de la que tomar los valores para <!--las celdas de -->las nuevas columnas


* Aplicado a `table2` sirve para limpiar datos con observaciones que se dispersan en varias filas

:::
::::


```{r}
table1 %>% select(-population) %>%            # Tabla de presentación para casos
    pivot_wider(names_from = year, values_from = cases)   
```

<!--
Pivotar data/table1.csv en Excel con tablas dinámicas
-->

## Dos funciones útiles

* `separate()`: dividir una columna en múltiples variables indicando un separador o vector de posiciones en las que dividir

<!--
* Argumentos: *date frame*, columna a dividir, nombres de las nuevas variables y carácter separador (por defecto cualquier carácter no numérico)

<!--(estrictamente, una expresión regular)-->

```{r, eval=FALSE, echo=TRUE}
table3 %>% separate(rate, into = c("cases", "population"), sep = "/")
table5 <- table3 %>% separate(year, into = c("century", "year"), sep = 2)
```

```{r, eval=FALSE, echo=FALSE}
table3 %>% separate(rate, into = c("cases", "population"), sep = "/")
table3 %>% separate(rate, into = c("cases", "population")) 
```

<!--
* Si se pasa a `sep` un vector de enteros, son posiciones en las que dividir
    - la longitud de `sep` debe ser uno menos que la de `into`
    - valores positivos comienzan (en 1)por la izquierda; negativos (desde -1) por la derecha

```{r, eval=FALSE, echo=FALSE}
table3 %>% separate(year, into = c("century", "year"), sep = 2)
```
-->

* Con el argumento `convert = TRUE` intenta convertir el tipo de datos (no mantener carácter)


```{r, eval=FALSE, echo=TRUE}
table3 %>% separate(rate, into = c("cases", "population"), convert = TRUE)
```

* `unite()`: combinar múltiples columnas en una 

<!--
* Argumentos: 
    - un *data frame*
    - el nombre de la nueva variable a crear 
    - un conjunto de columnas a combinar
    - carácter entre valores de las columnas originales
    
* El separador por defecto es subrayado, `sep = _`
-->

```{r, eval=FALSE, echo=TRUE}
table5 %>% 
  unite(new, century, year, sep = "-")
```

```{r, eval=FALSE, echo=FALSE}
table5 %>% 
  unite(new, century, year, sep = "")   # sin separación

table5 %>% 
  unite(new, century, year, sep = "-")
```

<!--
## Verbos principales en `tidyr` (cont.)

* `separate()`: separar una columna que representa múltiples variables

  ![](figure/separate2.png){width=85%}
  
* `unite()`: une varias columnas (inverso de `separate()`)
-->

## Comentario sobre valores ausentes

```{r, eval=FALSE, echo=TRUE}
accion <- tibble( anio  = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
                  trim  = c(   1,    2,    3,    4,    2,    3,    4),
                  rent  = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66))
```

*  **Dos tipos** de valores ausentes: en 2015.Q4 *explícitos* y en 2016.Q1 *implícitos*

* Esto cambia con la forma de representación

```{r, eval=FALSE, echo=TRUE}
ancho <- accion %>% 
            pivot_wider(names_from = anio, values_from = rent)     
ancho             # NA explícitos al convertir a formato ancho

ancho %>%  pivot_longer(cols = c("2015","2016"), 
                        names_to = "anio", values_to = "rent")

accion %>% complete(anio, trim)  # todos NA explícitos 
                                 # (rellena buscando todas combinacines)
```


```{r echo=FALSE, eval=FALSE}
ancho %>%  pivot_longer(cols = c("2015","2016"), names_to = "anio", values_to = "rent",
               values_drop_na = TRUE)  # NA implícitos al convertir a largo 

```

<!--
* complete(): encuentra todas las combinaciones únicas y se asegura de la tabla contiene todos esos valores

* rellenando `NA` explícitos cuando sea necesario.
-->
